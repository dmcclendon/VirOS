--- etc_rc.d_init.d_halt.orig	2008-01-10 23:10:45.000000000 -0600
+++ etc_rc.d_init.d_halt.patched	2008-01-10 23:13:15.000000000 -0600
@@ -126,10 +126,21 @@
 	;;
 esac
 
-[ -x /sbin/hwclock ] && action $"Syncing hardware clock to system time" /sbin/hwclock $CLOCKFLAGS
+[ -x /sbin/no-such-no-such-hwclock ] && action $"Syncing hardware clock to system time" /sbin/no-such-no-such-hwclock $CLOCKFLAGS
+
+# Prepare protected filesystems (e.g. device mapper subcomponents of rootfs)
+# awk extension source.
+rootfs_subcomponents_awk_source="{ }"
+rootfs_subcomponents_awk_source_for_mount="{ }"
+if [ -f /dev/.fstab.live.special ]; then
+    for protected_fs in $( < /dev/.fstab.live.special ); do
+	rootfs_subcomponents_awk_source="\$2 == \"${protected_fs}\" { next ; } ${rootfs_subcomponents_awk_source}"
+	rootfs_subcomponents_awk_source_for_mount="\$3 == \"${protected_fs}\" { next ; } ${rootfs_subcomponents_awk_source}"
+    done
+fi
 
 # Try to unmount tmpfs filesystems to avoid swapping them in.  Ignore failures.
-tmpfs=$(awk '$2 ~ /^\/($|proc|dev)/ { next; }
+tmpfs=$(awk --source "${rootfs_subcomponents_awk_source}" --source '$2 ~ /^\/($|proc|dev)/ { next; }
 	     $3 == "tmpfs" { print $2; }' /proc/mounts | sort -r)
 [ -n "$tmpfs" ] && fstab-decode umount $tmpfs 2>/dev/null
 
@@ -180,7 +191,7 @@
 
 # Try all file systems other than root, essential filesystems and RAM disks,
 # one last time.
-awk '$2 !~ /\/(|dev|proc|selinux)$/ && $1 !~ /^\/dev\/ram/ { print $2 }' \
+awk --source "${rootfs_subcomponents_awk_source}" --source '$2 !~ /\/(|dev|proc|selinux)$/ && $1 !~ /^\/dev\/ram/ { print $2 }' \
     /proc/mounts | sort -r | \
   while read line; do
     fstab-decode umount -f $line
@@ -192,10 +203,45 @@
 
 # Remount read only anything that's left mounted.
 # echo $"Remounting remaining filesystems readonly"
-mount | awk '{ print $3 }' | while read line; do
+mount | awk --source "${rootfs_subcomponents_awk_source_for_mount}" --source '{ print $3 }' | while read line; do
     fstab-decode mount -n -o ro,remount $line
 done
 
+#
+# LiveOS persistent overlay teardown
+#
+
+# cleanly remount readonly the overlayfs
+
+# SELinux seems to interfere with the subsequent losetup call
+if [ -x /usr/sbin/getenforce ]; then
+    if [ "x$( /usr/sbin/getenforce )" == "xEnforcing" ]; then
+	/usr/sbin/setenforce Permissive
+    fi
+fi
+
+# next, replace the devicemapper live-rw snapshot table, with a new
+# table that has the read-only loop device instead
+dmsetup load --readonly --table "0 $( blockdev --getsize /dev/live-osimg ) snapshot /dev/live-osimg /dev/live-overlay-readonly p 8" live-rw
+dmsetup resume live-rw
+
+# now the read-write overlay device can be torn down
+losetup -d /dev/live-overlay
+
+overlayfs_fstype="$( /lib/udev/vol_id --type /dev/live )"
+overlayfs_dev=/dev/live
+
+mount -n -t ${overlayfs_fstype} -o remount,ro ${overlayfs_dev} /mnt/overlayfs
+
+overlay_unmount_failed="$?"
+if (($overlay_unmount_failed)); then
+    echo "LiveOS: WARNING: overlay filesystem remount readonly failed"
+fi
+
+#
+# END of LiveOS persistent overlay teardown
+#
+
 # Now halt or reboot.
 echo $"$message"
 if [ -f /fastboot ]; then
