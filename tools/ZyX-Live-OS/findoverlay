#!/bin/bash
#
#############################################################################
#
# findoverlay: early init tool to set up LiveOS persistence overlay device
#
#############################################################################
#
# Copyright 2007-2009 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

#set -o verbose

# the overlay option value is pulled by init's parsing of /proc/cmdline
zyx=$1
overlay=$2
loopdev=$3
rloopdev=$4
debug=$5
ram_overlay_size=$6
reset_overlay=$7
reset_overlay_sizemb=$8

function fodebug {
    if ((${debug})); then
	echo "findoverlay: $*"
    fi
}

fodebug "starting..."

# get the (safe)label and uuid of the live media
# /dev/root is still the cdrom/usb at this point in time
#LIVEOS_SAFELABEL=$( vol_id -l /dev/root )
#LIVEOS_UUID=$( vol_id -u /dev/root )
# 
# new way is via zyx= cmdline arg
LIVEOS_SAFELABEL="$zyx"

fodebug "LiveOS SAFELABEL is ${LIVEOS_SAFELABEL}"

# calculate pathspec from overlay option, i.e. stuff following the ':'
if ( echo $overlay | grep -q ":" ); then
    # pathspec specified, extract
    pathspec=$( echo $overlay | sed -e 's/^.*://' )
else
    # no pathspec specified, set default
    pathspec="/boot/LiveOS/zyx/overlay-${LIVEOS_SAFELABEL}"
fi

# handle special formats of pathspec
if [ "x${pathspec}" == "x" -o "${pathspec}" == "auto" ]; then
    # empty or auto pathspec specified, set to default
    pathspec="/boot/LiveOS/zyx/overlay-${LIVEOS_SAFELABEL}"
elif ( echo $pathspec | grep -v -q "/" ); then
    # no leading slash implies prepending of default
    pathspec="/boot/LiveOS/zyx/overlay-${LIVEOS_SAFELABEL}-${pathspec}"
fi

fodebug "calculated pathspec is ${pathspec}"

# calculate devspec from overlay option, i.e. stuff preceding the ':'
devspec=$( echo $overlay | sed -e 's/:.*$//' )
if [ ! -n "$devspec" ]; then
    # no devspec, revert to default of auto
    devspec="auto"
fi

fodebug "calculated devspec is ${devspec}"

# load filesystem modules that may be required for overlay
# TODO: only load these conditionally if vol_id detects a fs that needs them
#       or find out if they are autoloaded autmatically 

# for typical vfat on usbstick
# testing autoload
#modprobe vfat
# for typical ntfs on usbstick or host disk
#modprobe fuse
# for typical ext3
# assumption: ext3 is already loaded

# check if devspec is auto
numcandidates=0
candidates=""
if [ "$devspec" == "auto" ]; then
    # if devspec is auto, search all possible devices, for now that means:
    # /dev/sd* /dev/scd* /dev/sr*
    devices="$( find /dev -name "sd*" -print 2> /dev/null ) $( find /dev -name "scd*" -print 2> /dev/null ) $( find /dev -name "sr*" -print 2> /dev/null)"
    fodebug "found devices are $devices"
    mkdir /testmount
    for device in $devices; do
	fodebug "about to test readonly on device $device"
	devro=$( blockdev --getro $device 2> /dev/null )
	if (($?)); then
	    devusable=0
	else
	    if (( $devro )); then
		devusable=0
	    else
		devusable=1
	    fi
	fi
	if (( $devusable )); then 
	    blockdev --setro $device
	    fodebug "about to test mount device $device"
	    fstype=$( vol_id -t $device )
	    if  [ "$fstype" == "vfat" ]; then
		mountcom="mount -n -t vfat -o ro"
# ntfs currently unsupported
#	    elif [ "$fstype" == "ntfs" ]; then
#		mountcom="mount.ntfs-3g -t ntfs -o ro"
	    elif  [ "$fstype" == "ext3" ]; then
		mountcom="mount -n -t ext3 -o ro"
	    else
		fodebug "unsupported filesystem found, trying auto"
		mountcom="mount -n -t auto -o ro"
	    fi
	    if ( $mountcom $device /testmount > /dev/null 2>&1 ); then
		fodebug "about to look for /testmount/${pathspec} on $device"
		if [ -f /testmount/${pathspec} ]; then
		    fodebug "found /testmount/${pathspec} on $device"
		    numcandidates=$(( $numcandidates + 1 ))
		    candidates="$candidates $device"
		    fodebug "numcandidates is now $numcandidates"
		    fodebug "candidates is now $candidates"
		fi
		fodebug "about to unmount device $device"
		umount /testmount
	    fi
	    blockdev --setrw $device
	fi
    done
    rmdir /testmount
    
    # if more than one possible overlay images were found, the user must
    # be prompted.  This input mechanism is pretty simplistic.  Hopefully
    # there will be some slick gdm/X gui at some point.
    if [ $numcandidates -gt 1 ]; then
	xdone=0
	while (( ! $xdone )); do
	    echo -en "\n\n\nfindoverlay: multiple overlay images found, plese select one:\n\n\n"
	    echo -en "choices:\n\n"
	    echo -en "0: ignore overlay images, create fresh overlay in ram\n"
	    candidatenum=1
	    for candidate in $candidates; do
		cfslabel="$( /sbin/vol_id -L $candidate )"
		cuuid="$( /sbin/vol_id -u $candidate )"
		cfstype="$( /sbin/vol_id -t $candidate )"
		echo -en "${candidatenum}: ${candidate} LABEL=${cfslabel} FSTYPE=${cfstype} UUID=${cuuid}\n"
		candidatenum=$(( $candidatenum + 1 ))
	    done
	    echo -en "\n\nchoice? (60 second timeout, default: 0)"
	    read -t 60 choice

	    candidatenum=1
	    for candidate in $candidates; do
		if [ $choice -eq $candidatenum ]; then
		    pdev=$candidate
		fi
		candidatenum=$(( $candidatenum + 1 ))
	    done

	    if (( ! $choice )); then
		pdev=tmpfs
		xdone=1
	    elif ( blockdev $pdev > /dev/null 2>&1 ); then
		xdone=1
	    else
		echo -en "\n\nInvalid Choice - Please Choose Again\n\n"
	    fi
	done
    elif [ $numcandidates -eq 0 ]; then
	pdev=""
    else
	pdev=$candidates
    fi
else
    # specific devspec given
    
    # normalize devicename
    #
    # devspec may be of the following forms:
    #
    # /dev/sda1             # normalized form
    # sda1
    # LABEL=MyLABEL
    # UUID=MyUUID
    if ( echo $devspec | grep -q "^UUID=" ); then
	cuuid=$( echo $devspec | sed -e 's/^UUID=//' )
	pdev=$( findfs UUID=${cuuid} )
    elif ( echo $devspec | grep -q "^LABEL=" ); then
	clabel=$( echo $devspec | sed -e 's/^LABEL=//' )
	pdev=$( findfs LABEL=${clabel} )
    elif ( echo $devspec | grep -q '/' ); then
	pdev=$devspec
    else
	pdev="/dev/${devspec}"
    fi
fi

# now that we have the normalized reference to the persistence device
# set it up
# remove leading and trailing whitespace, perhaps unnecessary
pdev=$( echo $pdev | sed -e 's/^\s*//' | sed -e 's/\s*$//' )
fodebug "persistence device is: $pdev"
pmounted=0
if ( blockdev $pdev > /dev/null 2>&1 ); then
    fodebug "about to mount persistence device $pdev"
    mount -n -t auto $pdev /mnt/.LiveOS/overlayfs
    ofstype="$( /sbin/vol_id -t $pdev )"
    pmounted=1
fi

if [ "x${reset_overlay}" == "xon" ]; then
    if [ -f "/mnt/.LiveOS/overlayfs${pathspec}" ]; then
	if [ "x${reset_overlay_sizemb}" == "x0" ]; then
	    echo -en "\n\n\nZyX: reinitializing overlay...\n\n\n"
	    dd if=/dev/zero of="/mnt/.LiveOS/overlayfs${pathspec}" bs=1k count=42 conv=notrunc > /dev/null 2>&1
	else
	    echo -en "\n\n\nZyX: initializing overlay to ${reset_overlay_sizemb}MB, this may take a little while...\n\n\n"
	    dd if=/dev/zero of="/mnt/.LiveOS/overlayfs${pathspec}" bs=1M count=${reset_overlay_sizemb} > /dev/null 2>&1
	fi
    else 
	if [ "x${reset_overlay_sizemb}" == "x0" ]; then
	    echo -en "\n\n\nZyX: could not find overlay, please enter size in MB of desired initial\n"
	    echo -en "   : overlay, or enter to continue with a temporary RAM overlay.\n"
	    read reset_overlay_sizemb
	    if [ "x${reset_overlay_sizemb}x" != "xx" ]; then
		#TODO: error check input
		echo -en "\n\n\nZyX: initializing overlay to ${reset_overlay_sizemb}MB, this may take a little while...\n\n\n"
		dd if=/dev/zero of="/mnt/.LiveOS/overlayfs${pathspec}" bs=1M count=${reset_overlay_sizemb} > /dev/null 2>&1
	    fi
	else
	    echo -en "\n\n\nZyX: initializing overlay to ${reset_overlay_sizemb}MB, this may take a little while...\n\n\n"
	    dd if=/dev/zero of="/mnt/.LiveOS/overlayfs${pathspec}" bs=1M count=${reset_overlay_sizemb} > /dev/null 2>&1
	fi
    fi
fi

if [ -w "/mnt/.LiveOS/overlayfs${pathspec}" ]; then
    fodebug "setting up overlay file"
    losetup ${loopdev} /mnt/.LiveOS/overlayfs${pathspec}
    losetup -r ${rloopdev} /mnt/.LiveOS/overlayfs${pathspec}
# todo- perhaps implement this and below notes
#    date > /mnt/.LiveOS/overlayfs${pathspec}.inuse
else
    echo "findoverlay: failed to find usable overlay image, setting up non-persistenct ram overlay"
    # ugly way to emphasize this failure case to the user
    sleep 7
#
# OPEN DM-SNAPSHOT BUG (BUG#4XXXXX)
#
    if ( grep -q nobwa /proc/cmdline ); then
	mount -n -t tmpfs -o mode=0755 none /mnt/.LiveOS/overlayfs  
    else
	touch /dev/.special.bwa
    fi

    dd if=/dev/null of=/mnt/.LiveOS/overlayfs/dmoverlay \
	bs=1024 count=1 seek=$((${ram_overlay_size}*1024)) 2> /dev/null
    losetup ${loopdev} /mnt/.LiveOS/overlayfs/dmoverlay
    losetup -r ${rloopdev} /mnt/.LiveOS/overlayfs/dmoverlay
fi


# TODO: while mount scanning find a way to determine if the filesystem was 
#       not cleanly unmounted.  If so, IGNORE IT as it may be part of a 
#       hibernated OS !!
#
#       However, If the overlay file has a kin file with the suffix .inuse, 
#       this is evidence that that the overlay device was not unmounted 
#       cleanly.  In _this_ case, look at the filesystem(???) and determine 
#       whether or not the most recent mount of the filesystem is more recent
#       than the inuse file.  *If and only if* NOT, then it is safe to assume
#       that the filesystem is not part of a hibernated OS, and rather was
#       most recently used as a persistence device that failed to be
#       shutdown cleanly, thus it is safe to fsck the overlayfs, and then 
#       fsck the overlay-rootfs

# TODO: since ext3 is impossible to truly mount readonly*, and since 
#       similar issues may exist in other fs (ntfs???),  it may be useful
#       to have a function called really_mount_readonly() which does a 
#       blockdev --setro, then does a devicemapper snapshot to ram, then 
#       does a mount of the snapshotted device, then checks for existence of 
#       overlay and .inuse files.
#
#       Given the above function, if a persistence file is detected, but the 
#       above above inuse/recent-mount-stamp test fails, give the user a 30-60
#       second timeout option to force an fsck and mount of the uncleanly 
#       mounted overlayfs, defaulting to not using it.
#
# * this is verified.  After taking an uncleanly unmounted ext3fs, and doing
#   a blockdev --setro, trying to mount ro as ext3 gets
#   "EXT3-fs: INFO: recovery required on readonly filesystem"
#   "EXT3-fs: write access unavailable, connot proceed"
#   and what is worse, is trying to mount ro as ext2 gets
#   "EXT2-fs: sdb1: couldn't mount becuase of unsupported optional features (4)"
#


# TODO: handle nfs/network(fuse-httpfs?) persistence devices.  This will
#       require the ability to set up the network here, which is probably
#       not trivial.

