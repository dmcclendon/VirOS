#!/bin/bash
#
#############################################################################
#
# init: ZyX LiveOS early boot initialization script
#
#############################################################################
#
# Copyright 2007-2010 Douglas McClendon <dmc AT filteredperception DOT org>
#
# Inspired by similar scripts from other LiveOS distributions, particularly
# Fedora's mkliveinitrd, and Ubuntu's casper.
#
#############################################################################
#
# This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

##
## zyx function definitions
##

# set defaults for user accessible variables
function set_defaults {
    zyx="none"

    debug=0
    quiet=0
    
    drops=""
    run_early=""
    run_late=""
    
    locale=""

    # to determine if cmdline is overriding selinux
    selinux=1
    enforcing=1
    
    rootfs_device=""
    rootfs_fstype=""
    rootfs_mount_readonly=0
    rootfs_mount_flags=""
    
    media_verify=0
    
    init="/sbin/init"

    # dms|ufs
    cow_mode=dms

    # prevent rc.sysinit* from probing mdadm/lvm?
    forensic_mode=0

    overlay=off

    reset_overlay=off

    reset_overlay_sizemb=0

    livecache=off

    fatime=0

    udevsettle_timeout=60

    ram_overlay_size=4224

#    sdmc_megs=auto
#    sdmc_megs=96
    sdmc_megs=0

    bootsplash=0
    # plymouth, dracut, mayflower, kadischi- I really dislike redhat's names...
    # kms-bootsplash, mkinitramfs, live.init, viros... would have been my choices :)
    if [ -x /bin/plymouth ]; then 
	bootsplash=1
    fi

    # set path
    export PATH=/usr/bin:/bin:/usr/sbin:/sbin:/lib/udev
}

# drop user to a shell
function debug_mode {
    
    # hide eyecandy if needed
    if ( pidof plymouthd > /dev/null 2>&1 ); then
	plymouth --hide-splash
    fi

    echo ""
    echo ""
    echo ""
    if [ "$1" == "panic" ]; then
	shift
	echo "ZyX initramfs: /init panic- unexpected problem occurred!"
	if (( $# )); then
	    echo "ZyX initramfs: $@"
	fi
    else
	echo "ZyX initramfs: drop point $1 reached"
    fi
    echo "ZyX initramfs: entering debug mode ..."
    echo ""
    echo ""
    echo ""
    /bin/bash
}

# enable dropping to a bash shell in case of failed commands
trap "debug_mode panic" EXIT SIGINT
set -e

function dropcheck {
    for drop in $drops; do
	drop_name=$( echo $drop | sed -e 's/:.*//' )
	if [ "${drop_name}" != "${1}" ]; then return; fi
        if ( echo $drop | grep -q ":" ); then
            drop_prog=$( echo $drop | sed -e 's/.*:\(.*\)/\1/' )
	    if [ -x "$drop_prog" ]; then
		$drop_prog
	    else
		debug_mode panic "drop point $1 reached, but drop program $drop_prog is not a valid executable"
	    fi
        else
            debug_mode $1
	fi
    done
}

function runphase {
    if (( $debug )); then dropcheck "before_${1}"; fi
    
    eval "$@"

    if (( $debug )); then dropcheck "after_${1}"; fi
}

# status output/logging wrapper
function status {
    if (( ! $quiet )); then
	echo "ZyX initramfs: $@"
    fi
}

# debug/verbose output/logging wrapper
function debug {
    if (( $debug )); then
	echo "DEBUG: ZyX initramfs: $@"
    fi
}

# set up console device
function setup_console {

    # set up minimal udev for console
    mount -n -t tmpfs -o mode=0755 udev /dev
    mknod /dev/console c 5 1

    # redirect zyx init I/O to /dev/console
    exec < /dev/console > /dev/console 2>&1
}

# initialize magic system filesystems (i.e. /dev, /proc, /sys)
function setup_special_system_mounts {

    # finish setting up initial /dev
    mknod /dev/kmsg c 1 11
    mknod /dev/null c 1 3

    # make mountpoints for other special filesystems
    mkdir /dev/pts
    mkdir --mode=1777 /dev/shm

    if [ "${cow_mode}" == "dms" ]; then
	mkdir /dev/mapper
	mknod /dev/mapper/control c 10 63
    fi

    # create links for basic stuff
    ln -s /proc/self/fd /dev/fd
    ln -s fd/0 /dev/sdin
    ln -s fd/1 /dev/stdout
    ln -s fd/2 /dev/stderr

    # mount proc filesystem
    mount -n -t proc proc /proc

    # mount sys filesystem
    mount -n -t sysfs sysfs /sys

    # mount devpts filesystem
    # 5 is tty (in current ancestors)
    mount -n -t devpts -o gid=5,mode=620 /dev/pts /dev/pts 
    
    # mount shared memory filesystem
    mount -n -t tmpfs /dev/shm /dev/shm

}

# parse options given to the kernel by the bootloader/user
function parse_options {

    for option in $( < /proc/cmdline ) ; do
	case $option in
	    zyx=*)
	        zyx=${option#zyx=}
		;;
	    debug|verbose)
                debug=1
		;;
	    quiet)
                quiet=1
		;;
	    nobootsplash)
                bootsplash=0
		;;
	    drop=*)
                drops="$drops ${option#drop=}"
		;;
	    drop_early|shell)
	        drops="$drops early"
		;;
	    drop_late|eshell)
	        drops="$drops late"
		;;
	    run_early=*)
	        drops="$drops early:${option#run_early=}"
		;;
	    run_late=*)
	        drops="$drops late:${option#run_late=}"
		;;
	    locale=*)
                locale=${option#locale=}
		;;
	    selinux=*)
                selinux=${option#selinux=}
		;;
	    enforcing=*)
                enforcing=${option#enforcing=}
		;;
	    language=*)
                locale=${option#language=}
		;;
	    lang=*)
                locale=${option#lang=}
		;;
	    rootfs_device=*)
                rootfs_device=${option#rootfs_device=}
		;;
	    root=*)
                rootfs_device=${option#root=}
		;;
	    rootfs_fstype=*)
                rootfs_fstype=${option#rootfs_fstype=}
		;;
	    rootfstype=*)
                rootfs_fstype=${option#rootfstype=}
		;;
	    ro)
                rootfs_mount_readonly=1
		;;
	    rw)
                rootfs_mount_readonly=0
		;;
	    rootfs_mount_flags=*)
                rootfs_mount_flags=${option#rootfs_mount_flags=}
		;;
	    rootflags=*)
                rootfs_mount_flags=${option#rootflags=}
		;;
	    media_verify|verify|check)
                media_verify=1
		;;
	    init=*)
                init=${option#init=}
		;;
	    sdmc_megs=*)
                sdmc_megs=${option#sdmc_megs=}
		;;
	    cow_mode=*)
                cow_mode=${option#cow_mode=}
		;;
	    overlay)
                overlay=auto
		;;
	    overlay=*)
                overlay=${option#overlay=}
		;;
	    reset_overlay)
                reset_overlay=on
		;;
	    reset_overlay=*)
                reset_overlay=on
                reset_overlay_sizemb=${option#reset_overlay=}
		;;
	    livecache=*)
                livecache=${option#livecache=}
		;;
	    force_atime)
                fatime=1
		;;
	    fatime)
                fatime=1
		;;
	    forensic_mode)
                forensic_mode=1
		;;
	    ram_overlay_size=*)
                ram_overlay_size=${option#ram_overlay_size=}
		;;
            udevsettle_timeout=*)
                udevsettle_timeout=${option#udevsettle_timeout=}
		;;
	    zyx_noautopanic)
	        # disable automatic exit/panic on failed commands
                set +e
		;;
        esac
    done

    # calculate dynamic sdmc_megs default value based on
    # available memory
    if [ "${sdmc_megs}" == "auto" ]; then
	debug "calculating dynamic sdmc cache size"
	sys_megs=$(( $( cat /proc/meminfo | grep MemTotal | sed -e 's/^MemTotal:\ //' | sed -e 's/\ kB.*//' ) / 1024 ))
	debug "system memory size is $sys_megs mb"
	if (( $sys_megs < 128 )); then
	    sdmc_megs=0
	elif (( $sys_megs < 192 )); then
	    sdmc_megs=$(( $sys_megs - 128 ))
	elif (( $sys_megs < 384 )); then
	    sdmc_megs=$(( $sys_megs / 3 ))
	else
	    sdmc_megs=128
	fi
	debug "calculated sdmc cache size is $sdmc_megs mb"
    fi

    # do status here in case of quiet
    status "parsing kernel options ... done"
}

function load_some_drivers {

    # loop seems to be compiled into recent fedora drivers, may need 
    # alternate max_loop via cmdline
    if ( modprobe loop max_loop=42 > /dev/null 2>&1 ); then true; fi

    # in f10 this is compiled into the kernel by default
    if [ "${cow_mode}" == "dms" ]; then
	# modprobe -q wasn't enough for set -e environment
	if ( modprobe dm_snapshot > /dev/null 2>&1 ); then true; fi
    fi

    # modprobe -q wasn't enough for set -e environment
    if ( modprobe sr_mod > /dev/null 2>&1 ); then true; fi

}


# start hotplug
function start_hotplug {
    status "starting hotplug"

    echo "" > /proc/sys/kernel/hotplug
}

# use root filesystem information from /etc/fstab if available and not
# overridden by the user via kernel options
function parse_fstab {

    if [ ! -f /etc/fstab ]; then return; fi

    status "parsinge fstab"

    if (($fatime)); then
	sed -i -e 's/noatime/atime/g' /etc/fstab
    fi

    # set rootfs variables, unless the user has overridden them

    while read device mountpoint fstype options dontcare; do
	if [ "$device" == "/" ]; then
	    if [ "${rootfs_device}" == "" ]; then
		rootfs_device=$device
	    fi
	    if [ "${rootfs_fstype}" == "" ]; then
		rootfs_fstype=$fstype
	    fi
	    if [ "${rootfs_mount_flags}" == "" ]; then
		rootfs_mount_flags=$options
	    fi
	fi
    done < /etc/fstab
}


# debugging dump of variables
function debug_show_opts {
    debug "post-parsed variable values"

    debug "debug is $debug"
    debug "quiet is $quiet"

    debug "drops is $drops"
    debug "run_early is $run_early"
    debug "run_late is $run_late"

    debug "locale is $locale"

    debug "rootfs_device is $rootfs_device"
    debug "rootfs_fstype is $rootfs_fstype"
    debug "rootfs_mount_readonly is $rootfs_mount_readonly"
    debug "rootfs_mount_flags is $rootfs_mount_flags"

    debug "media_verify is $media_verify"

    debug "init is $init"

    debug "sdmc_megs is $sdmc_megs"

    debug "cow_mode is $cow_mode"

    debug "overlay is $overlay"

    debug "reset_overlay is $reset_overlay"

    debug "reset_overlay_sizemb is $reset_overlay_sizemb"

    debug "livecache is $livecache"
}

function configure_udev {
    status "configuring udev"

    wait_for_udev_root=1
    rootfs_mount_device="/dev/root"

    # provide for dmsetup cookie appetite
    # https://bugzilla.redhat.com/show_bug.cgi?id=525319
#    cat <<EOF >> /etc/udev/rules.d/95-devkit-disks.rules
#ENV{DM_COOKIE}=="?*", RUN+="/sbin/dmsetup udevcomplete \$env{DM_COOKIE}"
#EOF

    # todo: better verbose output
    case $rootfs_device in
	CDLABEL=*)
            isolabel=${rootfs_device#CDLABEL=}
	    # TODO: research ATTRS{media} possibilities
#KERNEL=="hd[a-z]", BUS=="ide", ATTRS{removable}=="1", ATTRS{media}=="cdrom", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="root"
#KERNEL=="hd[a-z]", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="root"
	    cat <<SLREOF  > /etc/udev/rules.d/00-zyx_liveos.rules
KERNEL=="hd[a-z]", SUBSYSTEM=="block", ATTRS{removable}=="1", ATTRS{media}=="cdrom", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="root"
KERNEL=="sr[0-9]", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="root"
KERNEL=="scd[0-9]", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="root"
KERNEL=="pcd[0-9]", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="root"
SLREOF
            ;;
	/dev/disk/by-label/*)
	    label=${rootfs_device#/dev/disk/by-label/}
	    cat <<SLREOF  > /etc/udev/rules.d/00-zyx_liveos.rules
SUBSYSTEM=="block", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${label}", SYMLINK+="root"
SLREOF
	    ;;
	LABEL=*)
            label=${rootfs_device#LABEL=}
	    cat <<SLREOF  > /etc/udev/rules.d/00-zyx_liveos.rules
SUBSYSTEM=="block", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${label}", SYMLINK+="root"
SLREOF
            ;;
	/dev/disk/by-id/*)
	    uuid=${rootfs_device#/dev/disk/by-id/}
	    cat <<SLREOF  > /etc/udev/rules.d/00-zyx_liveos.rules
SUBSYSTEM=="block", PROGRAM="/sbin/blkid -s UUID -o value %N", RESULT=="${uuid}", SYMLINK+="root"
SLREOF
	    ;;
        UUID=*)
	    uuid=${rootfs_device#UUID=}
	    cat <<SLREOF  > /etc/udev/rules.d/00-zyx_liveos.rules
SUBSYSTEM=="block", PROGRAM="/sbin/blkid -s UUID -o value %N", RESULT=="${uuid}", SYMLINK+="root"
SLREOF
	    ;;
	/dev/*)
            wait_for_udev_root=0
	    ln -s $rootfs_device /dev/root
            ;;
	*)
	    rootfs_mount_device=$rootfs_device
	    ;;
    esac

    cat <<SLREOF  >> /etc/udev/rules.d/00-zyx_liveos.rules
SUBSYSTEM=="graphics",          GROUP="video"
SUBSYSTEM=="drm",               GROUP="video"
# console init
KERNEL=="tty0",         RUN+="/lib/udev/console_init %k"

SLREOF

    if (( $debug )); then
	if [ -f /etc/udev/rules.d/00-zyx_liveos.rules ]; then
	    debug "created /etc/udev/rules.d/00-zyx_liveos.rules"
	    debug "<begin debug rules dump>"
	    cat /etc/udev/rules.d/00-zyx_liveos.rules
	    debug "<end debug rules dump>"
	else
	    debug "did not create /etc/udev/rules.d/00-zyx_liveos.rules"
	fi
    fi

    echo 'udev_log="error"' > /etc/udev/udev.conf


    # rules for loading modules 
    # note: -q's are due to f10 compiling some things into the kernel that f9 didn't
    #       not enough for set -e env, but maybe enough for udev
    cat <<MPREOF >> /etc/udev/rules.d/10-modprobe.rules
ACTION=="add", SUBSYSTEM=="?*", ENV{MODALIAS}=="?*", RUN+="/sbin/modprobe \$env{MODALIAS}"
ACTION=="add", SUBSYSTEM=="scsi_device" RUN+="/sbin/modprobe -q sg"
ACTION=="add", SUBSYSTEM=="scsi_device", ATTRS{type}=="0|7|14", RUN+="/sbin/modprobe -q sd_mod"
ACTION=="add", SUBSYSTEM=="scsi_device", ATTRS{type}=="[45]", RUN+="/sbin/modprobe -q sr_mod"

MPREOF

}

function start_bootsplash {

    # the abyss needs to exist
    if [ ! -c /dev/null ]; then mknod /dev/null c 1 3; fi
    # and probably a few other handy character devnodes
    if [ ! -c /dev/zero ]; then mknod /dev/zero c 1 5; fi
    if [ ! -c /dev/systty ]; then mknod /dev/systty c 4 0; fi
    if [ ! -c /dev/fb ]; then mknod /dev/fb c 29 0; fi
    if [ ! -c /dev/hvc0 ]; then mknod /dev/hvc0 c 229 0; fi
    
    # poke graphics/tty
    udevadm trigger \
	--attr-match=class=0x030000 \
	> /dev/null 2>&1
    udevadm trigger \
	--subsystem-match=graphics \
	--subsystem-match=drm \
	--subsystem-match=tty \
	> /dev/null 2>&1
    
    # todo, rehide this output if it causes problems
    udevadm settle --timeout=42 > /dev/null 2>&1

    status "starting bootsplash daemon"
    /bin/plymouthd --attach-to-session
    /bin/plymouth --show-splash

}

function start_udev {
    status "starting udev"

    # --resolve-names=never means root owns all devices, which
    # is ok, since this initramfs udevd will be killed later
    status "launching udev daemon"
    /sbin/udevd --daemon --resolve-names=never

    /sbin/udevadm settle --timeout=0

    # do rocksplash stuff
    if (( $bootsplash )); then start_bootsplash; fi

    status "launching udevtrigger to create device nodes"
    /sbin/udevadm trigger > /dev/null 2>&1

    status "waiting for udev to settle"
#    if ( ! /sbin/udevadm settle --timeout=30 ); then
    # does 60 solve the X starting bug on netbook?
    if ( ! /sbin/udevadm settle --timeout="${udevsettle_timeout}" ); then
	status "udev is still unsettled"
    fi
}

function wait_for_udev_rootfs {
    status "waiting for udev to provide rootfs device"

    if (( ! $wait_for_udev_root )); then
	if [ ! -b $rootfs_mount_device ]; then
            debug_mode panic "cannot find the root filesystem device: ${rootfs_mount_device}, if you can make it exist manually, you can then exit this shell to continue booting"
	fi
    elif [ ! -b $rootfs_mount_device ]; then
	udev_extra_time=90
	status "giving udev an additional $udev_extra_time seconds to try and find the root filesystem device: $rootfs_mount_device"
	while (( $udev_extra_time > 0 )); do
	    sleep 1
	    if [ -b "$rootfs_mount_device" ]; then
		udev_extra_time=0
	    else
		if (( ! $quiet )); then echo -n "."; fi
		udev_extra_time=$(( $udev_extra_time - 1 ))
	    fi
	done
    fi

    if [ ! -b $rootfs_mount_device ]; then
        debug_mode panic "cannot find the root filesystem device: ${rootfs_mount_device}, if you can make it exist manually, you can then exit this shell to continue booting"
    fi
}

function run_media_verify {
    if (( ! $media_verify )); then return; fi

    status "running media verification"

    if [ "${rootfs_fstype}" != "iso9660" ]; then
	debug_mode panic "media_verify has been requested, but the root filesystem type is not iso9660.\n media_verify currently only supports iso9660 filesystems."
	return
    fi

    if [ ! -x /bin/checkisomd5 ]; then
	debug_mode panic "media_verify has been requested, but the checkisomd5 tool was not found in the initramfs.  You may exit the debug mode shell, if you wish to continue booting WITHOUT checkisomd5 media verification."
	return
    fi

    status "verifying iso9660 media integrity"
    status "note: this succeeding does not mean that the media is guaranteed authentic, just that the media thinks of itself as intact and complete"
   if ( ! /bin/checkisomd5 --verbose /dev/root ); then
       echo "Would you like to continue DESPITE verification failure?"
       echo "Type 'yes' to continue or control+alt+delete to reboot."
       read answer
       if [ "${answer}" != "yes" ]; then debug_mode panic; fi
   fi
}

function mount_prime_rootfs {
    status "mounting prime root filesystem"

    if [ "${rootfs_fstype}" == "" ]; then rootfs_fstype="auto"; fi

    if (( $rootfs_mount_readonly )); then
	addflag="ro"
    else
	addflag="rw"
    fi

    if [ "${rootfs_mount_flags}" == "" ]; then
	rootfs_mount_flags=$addflag
    else
	rootfs_mount_flags="${rootfs_mount_flags},${addflag}"
    fi

    if ( ! mount -n -t $rootfs_fstype -o $rootfs_mount_flags \
	$rootfs_mount_device /prime_rootfs ); then
	debug_mode panic "Failed to mount prime root filesystem device $rootfs_mount_device on /prime_rootfs with options ${rootfs_mount_flags}.  If you can do this manually, you can exit this debug shell and continue booting"
    fi
}

function prep_cow_rootfs {
    status "preparing copy-on-write root filesystem"

    if [ "$cow_mode" != "dms" ]; then 
	debug_mode panic "sorry, only dms cow_mode is currently supported"
    fi

    # format notes:
    # /boot/isolinux(cd/dvd) | /boot/syslinux(usb)
    # /boot/LiveOS/zyx/${version} or
    # /boot/LiveOS/zyx/part1_of_${version} ...
    # where $version comes from /proc/cmdline zyx= aka $zyx
    
    if [ -e /prime_rootfs/boot/LiveOS/zyx/${zyx}.squashfs.parts ]; then
	debug_mode panic "split container filesystems are not yet supported"
    elif [ -e /prime_rootfs/boot/LiveOS/zyx/${zyx}.squashfs.img ]; then
	zyx_root_container_loopdev=$( losetup -f )
	losetup -r ${zyx_root_container_loopdev} \
	    /prime_rootfs/boot/LiveOS/zyx/${zyx}.squashfs.img
	if (($sdmc_megs)); then
	    status "Super Device Mapper Caching ${sdmc_megs} megabytes..."
	    dd if=/prime_rootfs/boot/LiveOS/zyx/${zyx}.squashfs.img \
		of=/sdmc bs=1M count=$sdmc_megs \
		> /dev/.sdmc.log 2>&1
	    zyx_root_container_sdmc_loopdev=$( losetup -f )
	    losetup -r ${zyx_root_container_sdmc_loopdev} \
		/sdmc
	    rm -f /sdmc
	    secsize_sdmc=$( blockdev --getsize ${zyx_root_container_sdmc_loopdev} )
	    echo "0 ${secsize_sdmc} linear ${zyx_root_container_sdmc_loopdev} 0" > /dev/.sdmc_table
	    echo "${secsize_sdmc} $(( $( blockdev --getsize ${zyx_root_container_loopdev} ) - ${secsize_sdmc} )) linear ${zyx_root_container_loopdev} ${secsize_sdmc}" >> /dev/.sdmc_table
#	    dmsetup create zyx-container-sdmc /dev/.sdmc_table
	    # this (sdmc) hasn't been tested since noudevsync, or in a rather long while
	    dmsetup create zyx-container-sdmc /dev/.sdmc_table --noudevsync
	    rm -f /dev/.sdmc_table
	fi
    else
	debug_mode panic "could not find container filesystem image"
    fi

    if (($sdmc_megs)); then
	mount -n -t squashfs -o ro \
	    /dev/mapper/zyx-container-sdmc \
	    /container_rootfs
    else
	mount -n -t squashfs -o ro \
	    ${zyx_root_container_loopdev} \
	    /container_rootfs
    fi

    if [ -e /container_rootfs/boot/LiveOS/zyx/${zyx}.ext3.img ]; then
	zyx_root_base_loopdev=$( losetup -f )
	losetup -r ${zyx_root_base_loopdev} \
	    /container_rootfs/boot/LiveOS/zyx/${zyx}.ext3.img

    else
	debug_mode panic "could not find contained filesystem image"
    fi

    mkdir -p /mnt/.LiveOS/overlayfs
    zyx_root_overlay_loopdev=$( losetup -f )
    touch /fakefile
    losetup $zyx_root_overlay_loopdev /fakefile
    zyx_root_overlay_rloopdev=$( losetup -f )
    losetup -d $zyx_root_overlay_loopdev 
    rm -f /fakefile
    if [ "${overlay}" != "off" ]; then
        /sbin/findoverlay "$zyx" "$overlay" \
	    $zyx_root_overlay_loopdev \
	    $zyx_root_overlay_rloopdev \
	    $debug $ram_overlay_size \
	    $reset_overlay $reset_overlay_sizemb
    else

        mount -n -t tmpfs -o mode=0755 none /mnt/.LiveOS/overlayfs

	dd if=/dev/null of=/mnt/.LiveOS/overlayfs/dmoverlay \
	    bs=1024 count=1 seek=$((${ram_overlay_size}*1024)) > /dev/null 2>&1

	losetup $zyx_root_overlay_loopdev /mnt/.LiveOS/overlayfs/dmoverlay
	losetup -r $zyx_root_overlay_rloopdev /mnt/.LiveOS/overlayfs/dmoverlay

     fi

#    dmsetup create zyx-liveos-rw --table "0 $( blockdev --getsize $zyx_root_base_loopdev ) snapshot $zyx_root_base_loopdev $zyx_root_overlay_loopdev p 8"
#    echo "0 $( blockdev --getsize $zyx_root_base_loopdev ) snapshot $zyx_root_base_loopdev $zyx_root_overlay_loopdev p 8" |  dmsetup create zyx-liveos-rw
    # with new(f13ish/el6) udev tight integration with devicemapper, we need
    # to explicitly turn off that integration here before udev is fully up
    echo "0 $( blockdev --getsize $zyx_root_base_loopdev ) snapshot $zyx_root_base_loopdev $zyx_root_overlay_loopdev p 8" |  dmsetup create zyx-liveos-rw --noudevsync

    rm -f /dev/root
    ln -s /dev/mapper/zyx-liveos-rw /dev/root
}

function mount_final_rootfs {
    status "mounting final root filesystem"

    if [ "$cow_mode" != "dms" ]; then 
	debug_mode panic "sorry, only dms cow_mode is currently supported"
    fi

    if [ "$( /sbin/blkid -s UUID -o value /dev/mapper/zyx-liveos-rw )" == \
	"42244224-4224-4224-4224-422442244224" ]; then
	touch /etc/mtab
	tune2fs -U random /dev/mapper/zyx-liveos-rw > /dev/null 2>&1
#	tune2fs -U random /dev/mapper/zyx-liveos-rw 
    fi

    # woohoo- mount the cow root filesytem
    mount -n -t ext3 /dev/mapper/zyx-liveos-rw /sysroot

    ##
    ## keep constituent parts of the rootfs visible to the final LiveOS
    ##
    debug "movemounting prime_rootfs"
    mkdir -p /sysroot/mnt/.LiveOS/prime_rootfs
    mount --move /prime_rootfs /sysroot/mnt/.LiveOS/prime_rootfs
    echo "/mnt/.LiveOS/prime_rootfs" >> /dev/.fstab.live.special

    debug "movemounting container_rootfs"
    mkdir -p /sysroot/mnt/.LiveOS/container_rootfs
    mount --move /container_rootfs /sysroot/mnt/.LiveOS/container_rootfs
    echo "/mnt/.LiveOS/container_rootfs" >> /dev/.fstab.live.special

    debug "mounting and movemounting precow_rootfs"
    mkdir -p /sysroot/mnt/.LiveOS/precow_rootfs
#    dmsetup create zyx-liveos-ro --table "0 $( blockdev --getsize $zyx_root_base_loopdev ) linear $zyx_root_base_loopdev 0"
#    echo "0 $( blockdev --getsize $zyx_root_base_loopdev ) linear $zyx_root_base_loopdev 0" | dmsetup create zyx-liveos-ro
    echo "0 $( blockdev --getsize $zyx_root_base_loopdev ) linear $zyx_root_base_loopdev 0" | dmsetup create zyx-liveos-ro --noudevsync
    mount -n -t ext3 -o ro /dev/mapper/zyx-liveos-ro /precow_rootfs
    mount --move /precow_rootfs /sysroot/mnt/.LiveOS/precow_rootfs

# note: this isn't actually possible
# note: switchroot (at least the old nash version) doesn't use pivotmount,
# it uses a movemount to /
#    mkdir -p /sysroot/mnt/.LiveOS/initramfs
#    mount --bind / /sysroot/mnt/.LiveOS/initramfs

    mkdir -p /sysroot/mnt/.LiveOS/overlayfs
    mount --move /mnt/.LiveOS/overlayfs /sysroot/mnt/.LiveOS/overlayfs
    echo "/mnt/.LiveOS/overlayfs" >> /dev/.fstab.live.special
}

function tweak_rootfs {
    status "tweaking root filesystem for live session"

    # note: there might be a better way to do this, which is a workaround
    #     and/or fix for the fact that /etc/rc.d/init.d/zyx-live needs
    #     to run once on every boot (e.g. in persistence situations)
    #     One thought was to take everyting out of eri/zl that can 
    #     logically go elsewhere, then ensure that the rest is idempotent
    #     for each thing it does.
    if [ -f /sysroot/.zyxlive-configured ]; then
	rm -f /sysroot/.zyxlive-configured 
    fi

    # handle utc issue by trying to detect likely winblowz installation
    utc_hwclock=1
    if [ -x /sbin/ntfslabel ]; then
	if [ -b /dev/sda ]; then
            for device in $( find /dev -name "sda*" -print ); do
		if ( /sbin/ntfslabel "${device}" < /dev/null > /dev/null 2>&1 ); then
		    utc_hwclock=0
		fi
            done
	fi
    fi
    if (($utc_hwclock)); then
	sed -i -e 's/LOCAL/UTC/g' /sysroot/etc/adjtime
	if ( cat /sysroot/etc/sysconfig/clock | grep -q "^UTC=" ); then
	    sed -i -e 's/^UTC=.*/UTC=true/g' /sysroot/etc/sysconfig/clock
	else
	    echo "UTC=true" >> /sysroot/etc/sysconfig/clock
	fi
    else
	sed -i -e 's/UTC/LOCAL/g' /sysroot/etc/adjtime
	if ( cat /sysroot/etc/sysconfig/clock | grep -q "^UTC=" ); then
	    sed -i -e 's/^UTC=.*/UTC=false/g' /sysroot/etc/sysconfig/clock
	else
	    echo "UTC=false" >> /sysroot/etc/sysconfig/clock
	fi
    fi

    if (($fatime)); then
	sed -i -e 's/noatime/atime/g' /sysroot/etc/fstab
    fi

    if [ "${locale}" != "" ]; then
	echo "LANG=${locale}" > /sysroot/etc/sysconfig/i18n
    fi

    if [ "${isolabel}" != "" ]; then
	cat <<SLUREOF >> /sysroot/etc/udev/rules.d/50-udev.rules
KERNEL=="hd[a-z]", SUBSYSTEM=="ide", ATTRS{removable}=="1", ATTRS{media}=="cdrom", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="zyx_root_prime"
KERNEL=="sr[0-9]", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="zyx_root_prime"
KERNEL=="scd[0-9]", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="zyx_root_prime"
KERNEL=="pcd[0-9]", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${isolabel}", SYMLINK+="zyx_root_prime"
SLUREOF
    fi

    if [ "${label}" != "" ]; then
	cat <<SLUREOF >> /sysroot/etc/udev/rules.d/50-udev.rules
KERNEL=="hd[a-z]", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${label}", SYMLINK+="zyx_root_prime"
KERNEL=="hd[a-z][0-9]*", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${label}", SYMLINK+="zyx_root_prime"
KERNEL=="sd[a-z]", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${label}", SYMLINK+="zyx_root_prime"
KERNEL=="sd[a-z][0-9]*", PROGRAM="/sbin/blkid -s LABEL -o value %N", RESULT=="${label}", SYMLINK+="zyx_root_prime"
SLUREOF
    fi

    if [ "${uuid}" != "" ]; then
	cat <<SLUREOF >> /sysroot/etc/udev/rules.d/50-udev.rules
KERNEL=="hd[a-z]", PROGRAM="/sbin/blkid -s UUID -o value %N", RESULT=="${uuid}", SYMLINK+="zyx_root_prime"
KERNEL=="hd[a-z][0-9]*", PROGRAM="/sbin/blkid -s UUID -o value %N", RESULT=="${uuid}", SYMLINK+="zyx_root_prime"
KERNEL=="sd[a-z]", PROGRAM="/sbin/blkid -s UUID -o value %N", RESULT=="${uuid}", SYMLINK+="zyx_root_prime"
KERNEL=="sd[a-z][0-9]*", PROGRAM="/sbin/blkid -s UUID -o value %N", RESULT=="${uuid}", SYMLINK+="zyx_root_prime"
SLUREOF
    fi

    cat <<SLUREOF >> /sysroot/etc/udev/rules.d/50-udev.rules
KERNEL=="${zyx_root_container_loopdev#/dev/}" SYMLINK+="zyx_root_container"
KERNEL=="${zyx_root_base_loopdev#/dev/}" SYMLINK+="zyx_root_base"
KERNEL=="${zyx_root_overlay_loopdev#/dev/}" SYMLINK+="zyx_root_overlay"
KERNEL=="${zyx_root_overlay_rloopdev#/dev/}" SYMLINK+="zyx_root_overlay_readonly"
SLUREOF

    # don't know why these (may be::verify) are needed for el6, but not f12
    rm -f /sysroot/dev/root
    ln -s /dev/mapper/zyx-liveos-rw /sysroot/dev/root

    # experimental alternate mechanism to prevent lvm/mdadm probing in live mode
    if (( ${forensic_mode} )); then
	if [ -x /sysroot/sbin/lvm ]; then
	    mv /sysroot/sbin/lvm \
		/sysroot/sbin/lvm.disabled_in_forensic_mode
	    ln -s /bin/true /sysroot/sbin/lvm
	fi
	if [ -x /sysroot/sbin/mdadm ]; then
	    mv /sysroot/sbin/mdadm \
		/sysroot/sbin/mdadm.disabled_in_forensic_mode
	    ln -s /bin/true /sysroot/sbin/mdadm
	fi
    fi

    mount -n -t ext3 -o remount,ro /dev/mapper/zyx-liveos-rw /sysroot
}


function init_selinux {

    # do nothing if selinux=0 on cmdline
    if (( ! ${selinux} )); then return; fi
    
    # SELINUX should only be enabled if config exists
    SELINUX="disabled"
    if [ -e /sysroot/etc/selinux/config ]; then
	source /sysroot/etc/selinux/config
    fi

    # do nothing if no config or selinux disabled via config
    if ( echo "${SELINUX}" | grep -i -q disabled ); then
	return
    fi

    status "initializing selinux"

    # check if permissive mode
    se_permissive_mode=0
    if ( echo "${SELINUX}" | grep -i -q permissive ); then
	se_permissive_mode=1
    fi
    # cmdline can override config
    if ((! ${enforcing})); then
	se_permissive_mode=1
    fi
    
    # check if policy can be loaded
    if [ ! -x /sysroot/usr/sbin/load_policy -a ! -x /sysroot/sbin/load_policy ]; then
	if ((! ${se_permissive_mode})); then
	    debug_mode panic "selinux enforcing, but policy could not be loaded"
	else
	    status "warning: selinux permissive, but policy could not be loaded"
	    return
	fi
    fi

    # load policy
    chroot /sysroot load_policy -i
    se_retval=$?

    # 0 and 2 are apparently acceptable return values
    if [ ${se_retval} -eq 0 ]; then return; fi
    if [ ${se_retval} -eq 2 ]; then return; fi

    status "warning: selinux failed to load policy"
    if [ ${se_retval} -eq 3 -o ${se_permissive_mode} -eq 0 ]; then
	debug_mode panic "selinux enforcing, but policy could not be loaded"
    fi
	    
    return
}


function exit_initramfs {
    status "exiting initramfs, jumping to the real /sbin/init"

    if [ "${init}" == "/sbin/init" ]; then
	passopts=$( < /proc/cmdline )
    else
	passopts=""
    fi

    if [ ! -x "/sysroot/${init}" ]; then
	debug_mode panic "requested init: $init is not executable"
    else 

	if (( $bootsplash )); then
	    plymouth --newroot=/sysroot
	    plymouth --sysinit
	fi

	# tell udev to stop executing new events (before we kill it)
        udevadm control --stop-exec-queue

        # kill udev, be nice ...
        for pid in $( pidof udevd ); do
            kill "${pid}"
        done
        # ... then be thorough
        while ( pidof udevd > /dev/null 2>&1 ); do
            for pid in $( pidof udevd ); do
		# devnull perhaps due to first kill above taking time to work
                kill -KILL "${pid}" > /dev/null 2>&1
            done
        done

	exec /sbin/switch_root /sysroot "${init}" "${passopts}"
    fi
}


##
## end function definitions / begin zyx's main
##

runphase set_defaults

runphase setup_console

runphase setup_special_system_mounts

runphase parse_options

runphase parse_fstab

runphase debug_show_opts

runphase start_hotplug

runphase configure_udev

runphase load_some_drivers

runphase start_udev

dropcheck early

runphase wait_for_udev_rootfs

runphase run_media_verify

runphase mount_prime_rootfs

runphase prep_cow_rootfs

runphase mount_final_rootfs

runphase tweak_rootfs

runphase init_selinux

dropcheck late

runphase exit_initramfs

debug_mode panic "failed to exit initramfs"

##
## zyx's end
##

##
## only notes/comments past here
##

