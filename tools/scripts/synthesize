#!/bin/bash
#
#############################################################################
#
# synthesize: a tool to synthesize livecds and other os system images
#
#############################################################################
#
# Copyright 2007 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
#This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################



viros_prefix=/usr

if [ -f "$( dirname $0 )/libvsys.sh" ]; then
    source "$( dirname $0 )/libvsys.sh"
elif [ -f "${viros_prefix}/lib/viros/scripts/libvsys.sh" ]; then 
    source "${viros_prefix}/lib/viros/scripts/libvsys.sh" 
else
    echo "$0: error: fatal: could not load viros system library libvsys.sh"
    exit 1
fi


function usage {
    echo ""
    echo "${progname} \\"
    echo "    [--help] [--quiet] [--verbose] [--debug] \\"
    echo "    --strain=<strain> | --config=<config> \\ ### default: fz8"
    echo "    [[--addtrait=<traitspec>]] \\"
    echo "    [[--vxmogopts=<transmogrifier options>]] \\"
    echo "    [--transmogrifier=<transmogrifier>] \\   ### default: zyx-live"
    echo "    [--output=<filename>]                    ### default: ./vsys.iso"
    echo ""

    if [ "x${1}" == "xclean" ]; then
	exit 0
    else 
	exit 1
    fi
}

function cleanup_and_exit {
    if (( $vopt_debug )); then
	verbose "debug enabled: NOT removing tmpdir ${tmpdir}"
    else
	verbose "removing tmpdir, was ${tmpdir}"
	rm -rf ${tmpdir}
    fi
    verbose "goodbye!"
    exit 0
}



if [ "x${TMPDIR}" == "x1" ]; then
    default_vopt_tmpdir="/tmp"
else
    default_vopt_tmpdir="${TMPDIR}"
fi



export LIBVOPT_IGNORE_UNKNOWN_OPTIONS=true
vregopt config string ""
vregopt help boolean 0
vregopt verbose boolean 0 inherit
vregopt debug boolean 0 inherit
vregopt quiet boolean 0 inherit
vregopt cachedir string "" inherit
vregopt tmpdir string "${default_vopt_tmpdir}" inherit

vregopt vsysgen_output_container_size string "7G" inherit
vregopt vsysgen_distro string "fedora-8" inherit
vregopt vsysgen_arch string "x86" inherit
vregopt vsysgen_install_boot_iso string "http://download.fedoraproject.org/pub/fedora/linux/releases/8/Fedora/i386/iso/Fedora-8-i386-rescuecd.iso" inherit
vregopt vsysgen_install_boot_iso_sha1sum string "aa27d819079b8c92efa2ea58a5c0c84825f7a959" inherit
vregopt vsysgen_distro_config string "f8.ks" inherit
vregopt vsysgen_boot_cmdline string "initrd=initrd.img ks=http://QRAP_HOST_IP:QRAP_HTTPD_PORT/os.cfg acpi=force" inherit
vregopt vsysgen_screencast_output string "" inherit

vregopt output string "./viros.vsi"
vregopt mirrorlist string "" inherit

vparseopt "$@"

if (( $vopt_help )); then 
    usage clean 
fi

outputfile=$( normalize_path "${vopt_output}" )


vsysgen_distro_configfile=$( vfindfile ${vopt_vsysgen_distro_config} "ks cfg" ". ${LIBVOPT_CONFIGS_PATHS} ${vopt_add_search_paths}" )


if [ -f "$outputfile" ]; then
    die "${progname}: error: output file $outputfile already exists"
fi



verbose "initializing..."


verbose "creating temporary directory..."
export TMPDIR=${vopt_tmpdir}
tmpdir=$( mktemp -t -d vtmp.${progname}.${starttime}.${mypid}.XXXXXXXXXX )
if (($?)); then
    die "failed to mktemp"
fi
export TMPDIR=${tmpdir}
verbose "temporary directory is ${tmpdir}"

if [ "x${vopt_cachedir}" == "x" ]; then
    mkdir ${tmpdir}/cachedir
    vopt_cachedir="${tmpdir}/cachedir"
fi

vopt_cachedir=$( eval echo "${vopt_cachedir}" )
veva mkdir -p "${vopt_cachedir}"

export vopt_debug
export vopt_verbose
export vopt_quiet

intlogfile="${tmpdir}/vsys.log"

vhttpdroot="${tmpdir}/vsys_docroot"


cd $tmpdir

veva touch $intlogfile
logfiles="$intlogfile"

verbose "preparing synthesis materials..."

boot_iso_basename=$( basename ${vopt_vsysgen_install_boot_iso} )

if [ ! -f "${vopt_cachedir}/${boot_iso_basename}" ]; then
    pushd "${vopt_cachedir}" 
    veva urlgrabber --copy-local "${vopt_vsysgen_install_boot_iso}"
    popd > /dev/null 2>&1
fi

boot_iso_sha1sum=$( sha1sum "${vopt_cachedir}/${boot_iso_basename}" | sed -e 's/\s.*//' )
if [ "$boot_iso_sha1sum" != "${vopt_vsysgen_install_boot_iso_sha1sum}" ]; then
    die "install boot iso image ${vopt_cachedir}/${boot_iso_basename} has the wrong sha1sum $boot_iso_sha1sum which does not match the expected ${vopt_vsysgen_install_boot_iso_sha1sum} .  Please try removing this file so that it is downloaded again"
fi

veva cp -a ${viros_bases_dir}/${vopt_vsysgen_distro}/${vopt_vsysgen_arch}/vinsts/qrap/runpre ${tmpdir}/runpre

veva cp -a ${viros_bases_dir}/${vopt_vsysgen_distro}/${vopt_vsysgen_arch}/vinsts/qrap/runpost ${tmpdir}/runpost

mkdir -p ${vhttpdroot}

if [ "x${vopt_mirrorlist}" != "x" ]; then
    if [ ! -f "${vopt_mirrorlist}" ]; then
        die "specified mirrorlist ${mirrorlist} is not a file"
    else
        mirror_docroot=$( dirname $( normalize_path ${vopt_mirrorlist} ) )
        mirror_listconfig=$( basename ${vopt_mirrorlist} )
    fi
    ln -s ${mirror_docroot} ${vhttpdroot}/mirrors
fi


status "creating target system image"

debug "creating build copy of OS installation configuration"
ksflatten --output=${tmpdir}/uos.cfg ${vsysgen_distro_configfile} 
veva cp -a ${viros_bases_dir}/${vopt_vsysgen_distro}/${vopt_vsysgen_arch}/vinsts/qrap/kswrap.cfg ${tmpdir}/kswrap.cfg
pushd ${tmpdir} > /dev/null 2>&1
user_req_rootfs_size=$( cat uos.cfg | grep "^part" | sed -e 's/.*\-\-size\=\([^\s]*\)\s.*/\1/' )
user_req_rootfs_bytes_per_inode=$( cat uos.cfg | grep "^part" | sed -e 's/.*\-\-bytes\-per\-inode\=\([^\s]*\)\s.*/\1/' )
cat uos.cfg \
    | grep -v "^part" \
    > uos.stripped.cfg
sed -i -e 's/VKICKSTARTFILE/uos\.stripped\.cfg/' kswrap.cfg
ksflatten --output=os.cfg ./kswrap.cfg
sed -i os.cfg -e 's/shutdown/poweroff/'
if ( ! grep -q "^rootpw" os.cfg ); then
    cat <<EOF >> os.cfg
rootpw livefreeordie
%post
passwd -d root
%end
EOF
fi
popd > /dev/null 2>&1
if ( ! grep -q "^install" os.cfg ); then
    cat os.cfg | grep "^repo" > os.repos.cfg
    cat os.cfg | grep -v "^repo" > os.norepos.cfg
    numrepos=$( cat os.repos.cfg | wc -l )
    numrepos_minus_one=$(( $numrepos - 1 ))
    cat os.repos.cfg | tail -${numrepos_minus_one} | sed -e 's/\$basearch/i386/' > os.extrarepos.cfg
    cat os.repos.cfg | head -1 > os.instrepo.cfg
    if ( grep -q mirrorlist os.instrepo.cfg ); then
	mirrorlisturl=$( cat os.instrepo.cfg | \
	    sed -e 's/.*\-\-mirrorlist=//' | \
	    sed -e 's/\$basearch/i386/' )
	echo "mirrorlisturl is ${mirrorlisturl}"
	wget -O mirrorlist.txt "${mirrorlisturl}"
	cat mirrorlist.txt | grep -v "^#" > mirrors.txt
	nummirrors=$( cat mirrors.txt | wc -l )
	echo "nummirrors is xxx $nummirrors xxx"
	mnum=$(( ( $RANDOM % $nummirrors ) + 1 ))
	mchoice=$( cat mirrors.txt | head -${mnum} | tail -1 )
    else
	mchoice=$( cat os.instrepo.cfg | \
	    sed -e 's/.*\-\-baseurl=//' | \
	    sed -e 's/\$basearch/i386/' )
    fi
    cat <<EOF > os.cfg
install
url --url=${mchoice}
EOF
    cat os.extrarepos.cfg >> os.cfg
    cat os.norepos.cfg >> os.cfg
fi
veva cp ${tmpdir}/os.cfg  ${vhttpdroot}/os.cfg

veva qemu-img create ${tmpdir}/outimage.vsi ${vopt_vsysgen_output_container_size}


isoinfo -x /isolinux/isolinux.cfg \
    -i ${vopt_cachedir}/${boot_iso_basename} \
    > ${tmpdir}/inst.bootloaderconfig

isoinfo -x /isolinux/vmlinuz \
    -i ${vopt_cachedir}/${boot_iso_basename} \
    > ${tmpdir}/inst.kernel

isoinfo -x /isolinux/initrd.img \
    -i ${vopt_cachedir}/${boot_iso_basename} \
    > ${tmpdir}/inst.initrd


cat <<EOF>>${tmpdir}/synthesize.callback.sh

vreplace \
    QRAP_HOST_IP "\${QRAP_HOST_IP}" \
    -- ./runpre/runpre

tar cvzf runpre.tgz runpre

tar cvzf ./runpost.tgz runpost

cp -av ./runpre.tgz ./runpost.tgz \${QRAP_HTTPD_DOCROOT}/

vreplace \
    QRAP_HTTPD_PORT "\${QRAP_HTTPD_PORT}" \
    QRAP_HOST_IP "\${QRAP_HOST_IP}" \
    -- \${QRAP_HTTPD_DOCROOT}/os.cfg

if [ -f \${QRAP_HTTPD_DOCROOT}/mirrors/${mirror_listconfig} ]; then
    vmirmog \
        \${QRAP_HTTPD_DOCROOT}/mirrors/${mirror_listconfig} \
        \${QRAP_HTTPD_DOCROOT}/os.cfg \
        http://\${QRAP_HOST_IP}:\${QRAP_HTTPD_PORT}/mirrors
fi

EOF
chmod +x ${tmpdir}/synthesize.callback.sh

status "launching system installer..."

touch ${tmpdir}/vsys.build.log
vsys qrap \
    --vdisplay=X \
    --vhttpdport=X \
    --vhttpdroot=${vhttpdroot} \
    --recvideo=${tmpdir}/screencast \
    --callback=${tmpdir}/synthesize.callback.sh \
    -m ${viros_synthesize_qmem} -no-reboot -full-screen \
    -boot c -cdrom ${vopt_cachedir}/${boot_iso_basename} \
    -kernel ${tmpdir}/inst.kernel \
    -initrd ${tmpdir}/inst.initrd \
    -append "${vopt_vsysgen_boot_cmdline}" \
    -hda ${tmpdir}/outimage.vsi > ${tmpdir}/vsys.build.log 2>&1 &
vsysgen_qrap_pid=$!
echo "$vsysgen_qrap_pid" > ${tmpdir}/vsys.build.pid.qrap

cleanup_command="${cleanup_command} ; \
    status \"status: terminating qrap...\" ; \
    kill ${vsysgen_qrap_pid} ; sleep 3 ; kill -KILL ${vsysgen_qrap_pid} \
    "


if (($vopt_debug)); then
    tail -f --lines=9999 --pid=$vsysgen_qrap_pid ${tmpdir}/vsys.build.log | \
	tee -a ${tmpdir}/debug.log
else
    tail -f --lines=9999 --pid=$vsysgen_qrap_pid ${tmpdir}/vsys.build.log | \
	statuslogger ${tmpdir}/debug.log "synthesis progress" 1
fi

mv ${tmpdir}/outimage.vsi ${outputfile}

if [ "x${vsysgen_screencast_output}" != "x" ]; then
    veva mv ${tmpdir}/screencast.swf \
	${vsysgen_screencast_output}.swf
    veva mv ${tmpdir}/screencast.html \
	${vsysgen_screencast_output}.html
fi

verbose "processing done, cleaning up at $( date )"

veva $cleanup_command

cleanup_and_exit

status "finished"

exit 0

