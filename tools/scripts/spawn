#!/bin/bash
#
#############################################################################
#
# generate: a tool to synthesize livecds and other os system images
#
#############################################################################
#
# Copyright 2007-2009 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

#
##
##
## VirOS generate
##
## usage: vsys [options] generate [options]
##
## for detailed usage information: vsys help generate
##


##
## constant definitions
##
viros_prefix=/usr

##
## load viros system library
##
if [ -f "$( dirname $0 )/libvsys.sh" ]; then
    source "$( dirname $0 )/libvsys.sh"
elif [ -f "${viros_prefix}/lib/viros/scripts/libvsys.sh" ]; then 
    source "${viros_prefix}/lib/viros/scripts/libvsys.sh" 
else
    echo "$0: error: fatal: could not load viros system library libvsys.sh"
    exit 1
fi

##
## functions
##

##
## override libvopt.sh usage function
##
function usage {
    echo ""
    echo "${progname} \\"
    echo "    [--help] [--quiet] [--verbose] [--debug] \\"
    echo "    --strain=<strain> | --config=<config> \\ ### default: fz8"
    echo "    [[--traits=<traitspec>]] \\"
    echo "    [[--vxmogopts=<transmogrifier options>]] \\"
    echo "    [--transmogrifier=<transmogrifier>] \\   ### default: zyx-live"
    echo "    [--output=<filename>]                    ### default: ./viros.iso"
    echo ""

    if [ "x${1}" == "xclean" ]; then
	exit 0
    else 
	exit 1
    fi
}

function cleanup_and_exit {
    ##
    ## cleanup and exit
    ##
    if (( $vopt_debug )); then
	verbose "debug enabled: NOT removing tmpdir ${tmpdir}"
    else
	verbose "removing tmpdir, was ${tmpdir}"
	rm -rf ${tmpdir}
    fi
    verbose "goodbye!"
    exit 0
}


##
## use TMPDIR environment if set
##

if [ "x${TMPDIR}" == "x" ]; then
    default_vopt_tmpdir="/tmp"
else
    default_vopt_tmpdir="${TMPDIR}"
fi


##
## define and parse options
##

#
# general vsys options
#
vregopt config string "platform"
vregopt help boolean 0
vregopt verbose boolean 0 inherit
vregopt debug boolean 0 inherit
vregopt quiet boolean 0 inherit
vregopt cachedir string "" inherit
vregopt tmpdir string "${default_vopt_tmpdir}" inherit

#
# phase1-generate options
#
# this is the size of the qemu vsi rootfs
vregopt vsysgen_output_container_size \
    string "${v_x_def__output_container_size}" inherit
vregopt vsysgen_distro \
    string "${v_x_def__distro}" inherit
vregopt vsysgen_arch \
    string "${v_x_def__arch}" inherit
vregopt vsysgen_install_boot_iso \
    string "${v_x_def__install_boot_iso}" inherit
vregopt vsysgen_install_boot_iso_sha256sum \
    string "${v_x_def__install_boot_iso_sha256sum}" inherit
vregopt vsysgen_distro_config \
    string "${v_x_def__distro_config}" inherit
vregopt vsysgen_boot_cmdline \
    string "${v_x_def__boot_cmdline}" inherit

vregopt vsysgen_screencast_output string "" inherit

#
# phase2-mutate options
#
vregopt mirrorlist string "${HOME}/.viros/mirrors.link/el6/viros.mirrors.cfg" inherit
vregopt mutateopts cumulative ""
vregopt traits cumulative ""

#
# phase3-xmog options
#
vregopt transmogrifier string "zyx-live"
vregopt vxmogopts cumulative ""
vregopt output string "./viros.iso"

# parse options
vparseopt "$@"

if (( $vopt_help )); then 
    usage clean 
fi

verbose "creating temporary directory..."
export TMPDIR=${vopt_tmpdir}
tmpdir=$( mktemp -t -d vtmp.${progname}.${starttime}.${mypid}.XXXXXXXXXX )
if (($?)); then
    die "failed to mktemp"
fi
export TMPDIR=${tmpdir}
verbose "temporary directory is ${tmpdir}"

export vopt_debug
export vopt_verbose
export vopt_quiet

##
## phase 1 - synthesis
##

export vopt_mirrorlist
export vopt_cachedir

export vopt_vsysgen_output_container_size
export vopt_vsysgen_distro
export vopt_vsysgen_arch
export vopt_vsysgen_install_boot_iso
export vopt_vsysgen_install_boot_iso_sha256sum
export vopt_vsysgen_distro_config
export vopt_vsysgen_boot_cmdline

verbose "starting phase#1-synthesis at $( date )"

veva synthesize --output=${tmpdir}/outimage.vsi

##
## phase 2 - mutation
##

export vopt_traits
export vopt_mirrorlist

verbose "backing up synthesized vsi at $( date )"

veva cp -av --sparse=always \
    ${tmpdir}/outimage.vsi \
    ${tmpdir}/mutated.vsi

verbose "starting phase#2-mutation at $( date )"

veva mutate ${tmpdir}/mutated.vsi

##
## phase 3 - transmogrification
##

export vopt_vxmogopts

verbose "starting phase#3-transmogrification at $( date )"

veva transmogrify ${vopt_transmogrifier} \
    ${tmpdir}/mutated.vsi \
    ${vopt_output}

##
## clean up and exit
##

verbose "processing done, cleaning up at $( date )"

veva $cleanup_command

cleanup_and_exit

status "finished"

exit 0

