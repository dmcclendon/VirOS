#!/bin/bash
#
#############################################################################
#
# specvnc: a featureful tool for launching vnc sessions
#
#############################################################################
#
# Copyright 2007-2010 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

#
## VirOS specvnc
##
## usage viros vspecvnc --display=<displaynumber> --confdir=<> <start|stop|view>
##
## this command can be used to launch a dedicated vnc server, and thereafter
## to attach to it or stop it.
##

##
## constant definitions
##
viros_prefix=/usr

##
## load viros system library
##
if [ -f "$( dirname $0 )/libvsys.sh" ]; then
    source "$( dirname $0 )/libvsys.sh"
elif [ -f "${viros_prefix}/lib/viros/scripts/libvsys.sh" ]; then 
    source "${viros_prefix}/lib/viros/scripts/libvsys.sh" 
else
    echo "$0: error: fatal: could not load viros system library libvsys.sh"
    exit 1
fi

##
## override libvopt.sh usage function
##
function usage {
    echo ""
    echo "${progname} \\"
    echo "    [--help] [--quiet] [--verbose] [--debug] \\"
    echo "    [--config=<config>] \\"
    echo "    <viros-command> \\"
    echo "    [[<viros-command-options>]] "
    echo ""

    if [ "${1}" == "clean" ]; then
	exit 0
    else 
	exit 1
    fi
}

function cleanup_and_exit {
    ##
    ## cleanup and exit
    ##
    if (( $vopt_debug )); then
	verbose "debug enabled: NOT removing tmpdir ${tmpdir}"
    else
	verbose "removing tmpdir, was ${tmpdir}"
	rm -rf ${tmpdir}
    fi
    verbose "goodbye!"
    exit 0
}

##
## process command line arguments
##

if [ $# -ne 3 ]; then
    echo "usage: ${progname} --display=<displaynumber> --confdir=<> <start|stop|view>"
    exit 1
fi

# TODO: error check arguments
# TODO: don't assume argument order
specvnc_display=$( echo $1 | sed -e 's/.*=//' )
specvnc_confdir=$( echo $2 | sed -e 's/.*=//' )
specvnc_action=$3

specvnc_port=$(( $specvnc_display + 5900 ))

###
### local functions
###

function launch_specvnc {
    if [ -d "${specvnc_confdir}" ]; then
	die "specvnc confdir ${specvnc_confdir} already exists, aborting..."
    fi

    if ( checkport ${specvnc_port} ); then 
	status "port ${specvnc_port} is available"
    else
	die "port ${specvnc_port} is not available"
    fi

    # make tmp config directory
    
    cleanup_command="${cleanup_command} ; \
	rm -rf ${specvnc_confdir} \
        "
    if $(! mkdir ${specvnc_confdir} > /dev/null 2>&1 ); then
	die "could not make config dir ${specvnc_confdir}"
    fi
    
    ##
    ## create custom vnc configuration
    ##
    status "configuring special vnc server..."

    # create random password
    vsys_vncpassword=$( cat /dev/random | hexdump -n 4 -e '"%02x\n"' )
    echo -e "${vsys_vncpassword}\n${vsys_vncpassword}\n" | \
        veva env HOME=${specvnc_confdir} vncpasswd 

    veva make_vncstartup ${specvnc_confdir}/.vnc/xstartup

#    veva make_twmrc ${specvnc_confdir}/.vnc/twmrc

    ##
    ## launch special vnc server
    ##
    status "starting special vnc server..."

    cleanup_command="${cleanup_command} ; \
        status \"status: stopping special vnc server...\" ; \
        sleep 1 ; \
        veva env HOME=${specvnc_confdir} vncserver -kill :${specvnc_display} \
        "

# note: f7 transition, depth 24 failed, and not in a well indicated way
# note: depth 32 succeeds, but results in a bizarre case where 
#       xdpyinfo on the vnc server yields _only_ 32-bit visuals, which
#       causes qemu to give the 'failed to initialize SDL' thing.
#       For reasons that aren't yet clear to me, using depth 16, yields
#       xdpyinfo which shows all visuals available.

# this is a bug in veva argument handling, I went as far as
# doing a foreach loop on $@ and $1, $2... and enclosing in ''s, 
# which did succeed in getting this particular problem solved,
# but there were other issues and the problem deprioritized for now.

    if [ "${viros_stupid_vncname}" == "" ]; then
	vncname="VirOS___Synthesis___Monitor    "
    else
	vncname="${viros_stupid_vncname}    "
    fi
    vevastupid env HOME=${specvnc_confdir} vncserver :${specvnc_display} \
	-name "${vncname}" \
	-depth 16 \
	-localhost

    sleep 2

}

function destroy_specvnc {
    veva env HOME=${specvnc_confdir} vncserver -kill :${specvnc_display} 
    # debug
#    rm -rf ${specvnc_confdir}
}

function view_specvnc {
    # lack of functionality in vncviewer
    if [ ! -f "${specvnc_confdir}/vsm" ]; then
	cp $( which vncviewer ) ${specvnc_confdir}/vsm
	sed -i -e 's/VNC:/\ \ \ \ /' ${specvnc_confdir}/vsm
	sed -i -e 's/Tiger/\ \ \ \ \ /' ${specvnc_confdir}/vsm
    fi

    status "viewing special vnc server on display ${specvnc_display} ..."
    ${specvnc_confdir}/vsm -shared -passwd ${specvnc_confdir}/.vnc/passwd :${specvnc_display} \
	>> ${specvnc_confdir}/viewers.log 2>&1 
}

function viewonly_specvnc {
    # lack of functionality in vncviewer
    if [ ! -f "${specvnc_confdir}/vsm" ]; then
	cp $( which vncviewer ) ${specvnc_confdir}/vsm
	sed -i -e 's/VNC:/\ \ \ \ /' ${specvnc_confdir}/vsm
    fi

    status "viewing special vnc server on display ${specvnc_display} ..."
    ${specvnc_confdir}/vsm -shared -viewonly -passwd ${specvnc_confdir}/.vnc/passwd :${specvnc_display} \
	>> ${specvnc_confdir}/viewers.log 2>&1 
}

###
### end local functions
###

###
### main 
###
if [ "$specvnc_action" = "start" ]; then
    launch_specvnc
elif [ "$specvnc_action" = "stop" ]; then
    destroy_specvnc
elif [ "$specvnc_action" = "view" ]; then
    view_specvnc
elif [ "$specvnc_action" = "viewonly" ]; then
    viewonly_specvnc
fi

exit 0

