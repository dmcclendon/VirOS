#!/bin/bash
#
#############################################################################
#
# qrap: a qemu wrapper providing features used by VirOS not yet upstream
#
#############################################################################
#
# Copyright 2007-2010 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

#
## VirOS qrap
##
## DESCRIPTION
##
## qrap is a wrapper for qemu, which simplifies a few usage scenarios of
## particular interest to VirOS.  qrap supports the following features-
##
## 1) --vdisplay provides an alternate method of executing qemu within VNC.
##    This feature exists primarily due to the _current_ lack of authentication
##    support within the embedded vnc that comes with the stock qemu package.
##
## 2) --recvideo allows a video of the qemu session to be recorded.  This
##    feature exists primarily because the video recording functionality
##    provided by vnc2swf is not yet part of mainline vnc and/or qemu's vnc.
##
## 3) --vhttpdroot provides a mechanism to provide a custom http service
##    for the virtual host.  Similar in spirit to qemu's --smb feature.
##

##
## constant definitions
##
viros_prefix=/usr

##
## load viros system library
##
if [ -f "$( dirname $0 )/libvsys.sh" ]; then
    source "$( dirname $0 )/libvsys.sh"
elif [ -f "${viros_prefix}/lib/viros/scripts/libvsys.sh" ]; then 
    source "${viros_prefix}/lib/viros/scripts/libvsys.sh" 
else
    echo "$0: error: fatal: could not load viros system library libvsys.sh"
    exit 1
fi

##
## functions
##

##
## override libvopt.sh usage function
##
function usage {
    echo ""
    echo "usage: viros ${progname} \\"
    echo "                 --vdisplay=<DisplayNum> \\"
    echo "                 --vhttpdroot=<DocumentRoot> \\"
    echo "                 --vhttpdport=<HttpdPort> \\"
    echo "                 --recvideo=<screencast_output_prefix> \\"
    echo "                 --callback=<CallbackProgram> \\"
    echo "                 <Normal QEMU Options...>"
    echo ""

    if [ "${1}" == "clean" ]; then
	exit 0
    else 
	exit 1
    fi
}

function cleanup_and_exit {
    ##
    ## cleanup and exit
    ##
    if (( ${vopt_debug} )); then
	verbose "debug enabled: NOT removing tmpdir ${tmpdir}"
    else
	verbose "removing tmpdir, was ${tmpdir}"
	rm -rf ${tmpdir}
    fi
    verbose "goodbye!"
    exit 0
}


##
## use TMPDIR environment if set
##

if [ "${TMPDIR}" == "" ]; then
    default_vopt_tmpdir="/tmp"
else
    default_vopt_tmpdir="${TMPDIR}"
fi



##
## OPTION DESCRIPTIONS
##
## --vdisplay=<DisplayNum> \
##
## The qemu run will be run on a virtual VNC X display.  If displaynum is 'X'
## a random available display between :1 and :9 will be used.
##
## --vhttpdroot=<DocumentRoot> \
## --vhttpdport=<HttpdPort> \
##
## The virtual host will have access to a private httpd server exposing the
## contents of the path specified by DocumentRoot.  Symlinks can be followed.
## if no HttpdPort is specified, a random available one will be used, which
## will only be useful if a CallbackProgram is specified which somehow tells
## the virtual system about the random port chosen.
##
## --recvideo=<screencast_output_prefix> \
##
## Video will be recorded from qemu to the specified output file, with
## a .swf appended, along with a sibling .html
##
## --callback=<CallbackProgram> \
##
## If a callback program is specified, it will be invoked just prior to qemu
## actually being launched.  The motivation for this feature is to provide
## a way for user scripts to be able to be aware of the dynamic port and other
## information used by qrap.  I.e. qrap provides the standalone webserver 
## module, but it may utilize a randomly chosen available port.  The callback
## program will have the following environment variables defined:
##
## QRAP_HOST_IP // ip address of the host as seen from the virtual system
## QRAP_HTTPD_PORT // port that the standalone webserver is running on or NA
## QRAP_VDISPLAY // display number of the standalone VNC display or NA
#
#

##
## set constants
##

##
## process command line arguments
##

if [ $# -lt 1 ]; then 
    usage 
fi

##
## set defaults
##

# for pre-command options
vsys_qrap_vinput=""
vsys_qrap_vdisplay=""
vsys_qrap_vhttpdroot=""
vsys_qrap_recaudio=""
vsys_qrap_recvideo=""
vsys_qrap_callback=""
vsys_qrap_reaper=""

vopt_tmpdir=${default_vopt_tmpdir}
verbose "creating temporary directory..."
export TMPDIR=${vopt_tmpdir}
tmpdir=$( mktemp -t -d vtmp.${progname}.${starttime}.${mypid}.XXXXXXXXXX )
if (($?)); then
    die "failed to mktemp"
fi
export TMPDIR=${tmpdir}
verbose "temporary directory is ${tmpdir}"

intlogfile="${tmpdir}/qrap.log"

vnchome="${tmpdir}/qrap_vnchome"
vnc2swfhome="${tmpdir}/qrap_vnc2swfhome"

#### NOTE: valueless options are not yet suported

##
## parse pre-command options
##

#### NOTE: current assumption is that no -- qemu options will be used
while (echo "$1" | grep -q "^--"); do
    if (! echo "$1" | grep -q "="); then
        die "pre-command option \"$1\" needs a value"
    fi
    precomopt=$( echo "$1" | sed -e 's/^--\([^=]*\)=\(.*\)/\1/')
    precomopt_val=$( echo "$1" | sed -e 's/^--\([^=]*\)=\(.*\)/\2/')

    # TODO: pull this from a list as below (make it the same list)
    if [ \
	"$precomopt" = "vdisplay" -o \
	"$precomopt" = "vhttpdport" -o \
	"$precomopt" = "vhttpdroot" -o \
        "$precomopt" = "recvideo" -o \
        "$precomopt" = "callback" -o \
        "$precomopt" = "reaper" -o \
        "$precomopt" = "testopt" \
	]; then
        eval "vsys_qrap_${precomopt}='${precomopt_val}'"
    else
        usage
    fi
    shift
done

qrap_opts="vdisplay vhttpdroot recaudio recvideo callback"
#for thing in $qrap_opts; do
#    eval "status \"debug: $thing = \\\"\$vsys_qrap_${thing}\"\\\""
#done
#status "status: qemu arguments are: $@"

##
## begin processing
##

echo "${progname}: status: initializing at $( date ) ..."

##
## create temp directory and qoutputfile
##

echo "${progname}: status: tmpdir is ${tmpdir} ..."

if [ ! -d $tmpdir ]; then
    die "${progname}: error: tmpdir could not be created: $tmpdir"
fi

# create intlogfile
veva touch $intlogfile
logfiles="$intlogfile"

qoutputfile=$( mktemp "${tmpdir}/qoutput.XXXXXXXXXX" )

# debug
#cleanup_command="rm -f $qoutputfile ; $cleanup_command"

##
## configure private vnc server if needed
##

# remember local display
localdisplay=$DISPLAY

if [ "${vsys_qrap_vdisplay}" == "" ]; then
    status "no vdisplay specified, using environmental DISPLAY $DISPLAY"
    vsys_qrap_spawnvnc=0
    # HACKHACKHACK: assumes no display host , e.g. localhost:10.0
    vsys_qrap_vdisplay=$( echo "$DISPLAY" | sed -e 's/^://' )
elif [ "${vsys_qrap_vdisplay}" == "X" ]; then
    status "vdisplay X: probing for available display/port..."
    vsys_qrap_spawnvnc=1
    vsys_vnc_port=$( findfreeport $vsys_vnc_portmin $vsys_vnc_portmax )
    vsys_vnc_port_retval=$?
    if ((! $vsys_vnc_port_retval)); then
	vncdisplay=$(($vsys_vnc_port - 5900))
	status "vsys_vnc_port is $vsys_vnc_port"
	status "vncdisplay is $vncdisplay"
    else
	die "could not find available port for vnc server"
    fi
    vsys_qrap_vdisplay=$vncdisplay
else
    # vdisplay was specified explicitly
    status "using specified vdisplay $vsys_qrap_vdisplay"
    vsys_qrap_spawnvnc=0
fi
export DISPLAY=":${vsys_qrap_vdisplay}"

##
## launch private vnc server if needed
##

if (($vsys_qrap_spawnvnc)); then
    status "starting special vnc server..."
    
    cleanup_command="${cleanup_command} ; \
	status \"status: stopping special vnc server...\" ; \
	sleep 1 ; \
	veva specvnc --display=${vsys_qrap_vdisplay} --confdir=${vnchome} stop \
	"
    
    veva specvnc --display=${vsys_qrap_vdisplay} --confdir=${vnchome} start
    # TODO: make this a wait on event rather than flakey sleep
    #       Or rather, try to get specvnc to not return until it would be
    #       ready
    sleep 3

    # start recording, to yet another headless vnc server, if desired
    if [ "${vsys_qrap_recvideo}" != "" ]; then
	if ( ! which vnc2swf > /dev/null 2>&1 ); then
	    status "cannot vind vnc2swf in path, screencast capture is not possible"
	else
	    status "starting screencast recording..."

# C version of vnc2swf differs from the python version a bit
#	    vnc2swf -shared -viewonly \
#		-passwd ${vnchome}/.vnc/passwd \
#		-nowindow -startrecording \
#		${vsys_qrap_recvideo}.swf :${vsys_qrap_vdisplay} \
#		> ${vsys_qrap_recvideo}.html &

	    vnc2swf \
		-n \
		-r 4 \
		-P ${vnchome}/.vnc/passwd \
		-o ${vsys_qrap_recvideo}.swf \
		:${vsys_qrap_vdisplay} &
	fi
    fi
	
    # give gui feedback if it is called for.  
    # --verbose gives you vnc viewonly, --debug will give interactive/rw
    if (($vopt_debug)); then
	veva env \
	    DISPLAY=$localdisplay \
	    specvnc \
	    --display=${vsys_qrap_vdisplay} \
	    --confdir=${vnchome} \
	    view &
	qrap_specvnc_debug_viewer_pid=$!
	cleanup_command="${cleanup_command} ; \
	    status \"status: stopping debug vnc viewer...\" ; \
	    sleep 1 ; kill $qrap_specvnc_debug_viewer_pid ; \
	    sleep 3 ; kill -KILL $qrap_specvnc_debug_viewer_pid \
	    "

    elif (($vopt_verbose)); then 
	veva env \
	    DISPLAY=$localdisplay \
	    specvnc \
	    --display=${vsys_qrap_vdisplay} \
	    --confdir=${vnchome} \
	    viewonly &
	qrap_specvnc_verbose_viewer_pid=$!
	cleanup_command="${cleanup_command} ; \
	    status \"status: stopping debug vnc viewer...\" ; \
	    sleep 1 ; kill $qrap_specvnc_verbose_viewer_pid ; \
	    sleep 3 ; kill -KILL $qrap_specvnc_verbose_viewer_pid \
	    "

    fi

    # highly experimental ssh-X fix???
    # seemed to work (at least for the remote case)
    export HOME="${vnchome}"
fi

##
## configure private httpd server if needed
##
if [ "${vsys_qrap_vhttpdport}Y" = "Y" ]; then
    status "no vhttpdport specified, not launching private httpd server"
    vsys_qrap_spawnhttpd=0
elif [ "${vsys_qrap_vhttpdport}Y" = "XY" ]; then
    status "vhttpdport X: probing for available port..."
    vsys_qrap_spawnhttpd=1
    vsys_qrap_vhttpdport=$( findfreeport $viros_arap_portmin $viros_arap_portmax )
    vsys_webserver_port_retval=$?
    if ((! $vsys_webserver_port_retval)); then
	# BUG: this line of code is reached even when things went wrong
	#      with findport
	status "vsys_qrap_vhttpdport is $vsys_qrap_vhttpdport"
    else
	die "could not find available port for private httpd server"
    fi
else
    # vhttpdport was specified explicitly
    status "using specified vhttpdport $vsys_qrap_vhttpdport"
    vsys_qrap_spawnhttpd=1
fi

##
## launch private httpd server if needed
##

if (($vsys_qrap_spawnhttpd)); then

    status "starting private http server..."

    # convert any relative paths in vhttpdroot
    vsys_qrap_vhttpdroot="$( cd $( dirname $vsys_qrap_vhttpdroot ) ; pwd )/$( basename $vsys_qrap_vhttpdroot )"

    veva webserver \
	--port=${vsys_qrap_vhttpdport} \
	--docroot=${vsys_qrap_vhttpdroot} \
	--confdir=${tmpdir} \
	start
    
    cleanup_command="${cleanup_command} ; \
	status \"status: stopping special http server...\" ; \
	sleep 1 ; \
	veva webserver \
	--port=${vsys_qrap_vhttpdport} \
	--docroot=${vsys_qrap_vhttpdroot} \
	--confdir=${tmpdir} \
	stop \
	"
fi

##
## launch callback if needed
##

if [ "${vsys_qrap_callback}" != "" ]; then
    eval "env \
	QRAP_HOST_IP=${qrap_host_ip} \
	QRAP_HTTPD_PORT=${vsys_qrap_vhttpdport} \
	QRAP_HTTPD_DOCROOT=${vsys_qrap_vhttpdroot} \
	QRAP_VDISPLAY=${vsys_qrap_vdisplay} \
	${vsys_qrap_callback} \
	"
fi

##
## launch virtual system (QEMU)
##

# set up networking the qrap way (just adding hostname to the default 
# qemu behavior)
#vopt_qopts="-net nic -net user,hostname=zyxhost"
# may not have been required, but pcnet and other changes got f10 to work
#vopt_qopts="-net nic,model=pcnet -net user,hostname=zyxhost"
#vopt_qopts="-net nic -net user,hostname=zyxhost"
# i82551 i82557b i82559er ne2k_pci pcnet rtl8139
# rtl8139 and pcnet seem to have issues with f10qemu (Bad SWSTYLE=0x04, NetworkManager timeouts)
vopt_qopts=""
# this recovers pref11 behavior of not using kernel-PAE by default
vopt_qopts="${vopt_qopts} -cpu qemu32,-nx,-pae"
#vopt_qopts="${vopts_qopts} -net nic,model=i82557b"
vopt_qopts="${vopt_qopts} -net nic -net user,hostname=zyxhost"

# as of qemu 0.11.1 (not sure exactly which release) kqemu must be 
# explicitly enabled, and one cannot assume that support was
# enabled during compilation.  Idiots commenting in redhat
# bugzilla claim for 2.6 there is no speedup.  I beg to differ by
# a speedup factor of at least 100%.  Hardware snobs.  (said
# knowing that if the VirOS author owned kvm supported hardware,
# he probably wouldn't care that much)
if $( strings $( which qemu ) | grep -q "\-enable\-kqemu" ); then
    if [ -w /dev/kqemu ]; then
	vopt_qopts="${vopt_qopts} -enable-kqemu"
    fi
fi

# do string replacement for any qemu args, with the private httpd server info
numqargs=0
while (($#)); do
    numqargs=$(($numqargs + 1))
    # note, this is where the legacy -no-kqemu argument is reimplemented
    if ( echo "${1}" | grep -q "\-no\-kqemu" ); then
	vopt_qopts=$( echo "${vopt_qopts}" | sed -e 's/\-enable\-kqemu//g' )
    else
	qargs[$numqargs]=$( echo "${1}" | \
	    sed -e "s/QRAP_HOST_IP/${qrap_host_ip}/g" | \
	    sed -e "s/QRAP_HTTPD_PORT/${vsys_qrap_vhttpdport}/g" )
    fi
    shift
done

status "about to run qemu $vopt_qopts -pidfile ${tmpdir}/qpid.txt -serial stdio \"${qargs[@]}\""
echo "about to run qemu $vopt_qopts -pidfile ${tmpdir}/qpid.txt -serial stdio \"${qargs[@]}\"" \
    > ${tmpdir}/qemu.command.txt
qemu $vopt_qopts -pidfile ${tmpdir}/qpid.txt -serial stdio "${qargs[@]}" 2>&1 >> ${qoutputfile} &
qrap_qemu_pid=$!

cleanup_command="${cleanup_command} ; \
    status \"status: killing qemu...\" ; \
    sleep 1 ; kill ${qrap_qemu_pid} ; sleep 2 ; kill -KILL ${qrap_qemu_pid} \
    "

if (($vopt_debug)); then
    tail -f --pid=${qrap_qemu_pid} ${qoutputfile} &
fi

if [ "${vsys_qrap_reaper}" != "" ]; then
    qdone=0
    while ((!$qdone)); do
	if ( grep -q QEMU_DONE_IN_NEED_OF_SHUTDOWN ${qoutputfile} ); then
	    # bake-it is currently issuing this just before it
	    # does an init 0, so give it time to actually shut down.
	    sleep 77
	    debug "killing qemu subprocess once"
	    kill -HUP $qrap_qemu_pid > /dev/null 2>&1
	    sleep 3
	    debug "killing qemu subprocess again for good measure"
	    kill -KILL $qrap_qemu_pid > /dev/null 2>&1
	    qdone=1
            # restore traps
	    trap SIGCHLD
	    trap SIGHUP
	    trap SIGTERM
	    trap SIGINT
	else
	    if ( ps $qrap_qemu_pid > /dev/null 2>&1 ); then
		sleep 7
	    else
		debug "qemu exited without the help of qreaper"
		qdone=1
	    fi
	fi
    done
fi


status "status: waiting for qemu to exit..."
wait $qrap_qemu_pid

##
## clean up
##
status "cleaning up..."
debug "cleanup_command is $cleanup_command..."
veva $cleanup_command
