#!/bin/bash
#
#############################################################################
#
# qrap: a qemu wrapper providing features used by VirOS not yet upstream
#
#############################################################################
#
# Copyright 2007 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
#This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################


viros_prefix=/usr

if [ -f "$( dirname $0 )/libvsys.sh" ]; then
    source "$( dirname $0 )/libvsys.sh"
elif [ -f "${viros_prefix}/lib/viros/scripts/libvsys.sh" ]; then 
    source "${viros_prefix}/lib/viros/scripts/libvsys.sh" 
else
    echo "$0: error: fatal: could not load viros system library libvsys.sh"
    exit 1
fi


function usage {
    echo ""
    echo "usage: viros ${progname} \\"
    echo "                 --vdisplay=<DisplayNum> \\"
    echo "                 --vhttpdroot=<DocumentRoot> \\"
    echo "                 --vhttpdport=<HttpdPort> \\"
    echo "                 --recvideo=<screencast_output_prefix> \\"
    echo "                 --callback=<CallbackProgram> \\"
    echo "                 <Normal QEMU Options...>"
    echo ""

    if [ "x${1}" == "xclean" ]; then
	exit 0
    else 
	exit 1
    fi
}

function cleanup_and_exit {
    if (( $vopt_debug )); then
	verbose "debug enabled: NOT removing tmpdir ${tmpdir}"
    else
	verbose "removing tmpdir, was ${tmpdir}"
	rm -rf ${tmpdir}
    fi
    verbose "goodbye!"
    exit 0
}



if [ "x${TMPDIR}" == "x1" ]; then
    default_vopt_tmpdir="/tmp"
else
    default_vopt_tmpdir="${TMPDIR}"
fi






if [ $# -lt 1 ]; then 
    usage 
fi


vsys_qrap_vinput=""
vsys_qrap_vdisplay=""
vsys_qrap_vhttpdroot=""
vsys_qrap_recaudio=""
vsys_qrap_recvideo=""
vsys_qrap_callback=""
vsys_qrap_reaper=""

vopt_tmpdir=${default_vopt_tmpdir}
verbose "creating temporary directory..."
export TMPDIR=${vopt_tmpdir}
tmpdir=$( mktemp -t -d vtmp.${progname}.${starttime}.${mypid}.XXXXXXXXXX )
if (($?)); then
    die "failed to mktemp"
fi
export TMPDIR=${tmpdir}
verbose "temporary directory is ${tmpdir}"

intlogfile="${tmpdir}/qrap.log"

vnchome="${tmpdir}/qrap_vnchome"
vnc2swfhome="${tmpdir}/qrap_vnc2swfhome"



while (echo "$1" | grep -q "^--"); do
    if (! echo "$1" | grep -q "="); then
        die "pre-command option \"$1\" needs a value"
    fi
    precomopt=$( echo "$1" | sed -e 's/^--\([^=]*\)=\(.*\)/\1/')
    precomopt_val=$( echo "$1" | sed -e 's/^--\([^=]*\)=\(.*\)/\2/')

    if [ \
	"$precomopt" = "vdisplay" -o \
	"$precomopt" = "vhttpdport" -o \
	"$precomopt" = "vhttpdroot" -o \
        "$precomopt" = "recvideo" -o \
        "$precomopt" = "callback" -o \
        "$precomopt" = "reaper" -o \
        "$precomopt" = "testopt" \
	]; then
        eval "vsys_qrap_${precomopt}='${precomopt_val}'"
    else
        usage
    fi
    shift
done

qrap_opts="vdisplay vhttpdroot recaudio recvideo callback"


echo "${progname}: status: initializing at $( date ) ..."


echo "${progname}: status: tmpdir is ${tmpdir} ..."

if [ ! -d $tmpdir ]; then
    die "${progname}: error: tmpdir could not be created: $tmpdir"
fi

veva touch $intlogfile
logfiles="$intlogfile"

qoutputfile=$( mktemp "${tmpdir}/qoutput.XXXXXXXXXX" )



localdisplay=$DISPLAY

if [ "${vsys_qrap_vdisplay}Y" == "Y" ]; then
    status "no vdisplay specified, using environmental DISPLAY $DISPLAY"
    vsys_qrap_spawnvnc=0
    vsys_qrap_vdisplay=$( echo "$DISPLAY" | sed -e 's/^://' )
elif [ "X${vsys_qrap_vdisplay}" == "XX" ]; then
    status "vdisplay X: probing for available display/port..."
    vsys_qrap_spawnvnc=1
    vsys_vnc_port=$( findfreeport $vsys_vnc_portmin $vsys_vnc_portmax )
    vsys_vnc_port_retval=$?
    if ((! $vsys_vnc_port_retval)); then
	vncdisplay=$(($vsys_vnc_port - 5900))
	status "vsys_vnc_port is $vsys_vnc_port"
	status "vncdisplay is $vncdisplay"
    else
	die "could not find available port for vnc server"
    fi
    vsys_qrap_vdisplay=$vncdisplay
else
    status "using specified vdisplay $vsys_qrap_vdisplay"
    vsys_qrap_spawnvnc=0
fi
export DISPLAY=":${vsys_qrap_vdisplay}"


if (($vsys_qrap_spawnvnc)); then
    status "starting special vnc server..."
    
    cleanup_command="${cleanup_command} ; \
	status \"status: stopping special vnc server...\" ; \
	sleep 1 ; \
	veva specvnc --display=${vsys_qrap_vdisplay} --confdir=${vnchome} stop \
	"
    
    veva specvnc --display=${vsys_qrap_vdisplay} --confdir=${vnchome} start
    sleep 3

    if [ "${vsys_qrap_recvideo}Y" != "Y" ]; then
	if ( ! which vnc2swf > /dev/null 2>&1 ); then
	    status "cannot vind vnc2swf in path, screencast capture is not possible"
	else
	    status "starting screencast recording..."

	    vnc2swf -shared -viewonly \
		-passwd ${vnchome}/.vnc/passwd \
		-nowindow -startrecording \
		${vsys_qrap_recvideo}.swf :${vsys_qrap_vdisplay} \
		> ${vsys_qrap_recvideo}.html &
	fi
    fi
	
    if (($vopt_debug)); then
	veva env DISPLAY=$localdisplay specvnc --display=${vsys_qrap_vdisplay} --confdir=${vnchome} view &
	qrap_specvnc_debug_viewer_pid=$!
	cleanup_command="${cleanup_command} ; \
	    status \"status: stopping debug vnc viewer...\" ; \
	    sleep 1 ; kill $qrap_specvnc_debug_viewer_pid ; \
	    sleep 3 ; kill -KILL $qrap_specvnc_debug_viewer_pid \
	    "

    elif (($vopt_verbose)); then 
	veva env DISPLAY=$localdisplay specvnc --display=${vsys_qrap_vdisplay} --confdir=${vnchome} viewonly &
	qrap_specvnc_verbose_viewer_pid=$!
	cleanup_command="${cleanup_command} ; \
	    status \"status: stopping debug vnc viewer...\" ; \
	    sleep 1 ; kill $qrap_specvnc_verbose_viewer_pid ; \
	    sleep 3 ; kill -KILL $qrap_specvnc_verbose_viewer_pid \
	    "

    fi

    export HOME="${vnchome}"
fi

if [ "${vsys_qrap_vhttpdport}Y" = "Y" ]; then
    status "no vhttpdport specified, not launching private httpd server"
    vsys_qrap_spawnhttpd=0
elif [ "${vsys_qrap_vhttpdport}Y" = "XY" ]; then
    status "vhttpdport X: probing for available port..."
    vsys_qrap_spawnhttpd=1
    vsys_qrap_vhttpdport=$( findfreeport $viros_arap_portmin $viros_arap_portmax )
    vsys_webserver_port_retval=$?
    if ((! $vsys_webserver_port_retval)); then
	status "vsys_qrap_vhttpdport is $vsys_qrap_vhttpdport"
    else
	die "could not find available port for private httpd server"
    fi
else
    status "using specified vhttpdport $vsys_qrap_vhttpdport"
    vsys_qrap_spawnhttpd=1
fi


if (($vsys_qrap_spawnhttpd)); then

    status "starting private http server..."

    vsys_qrap_vhttpdroot="$( cd $( dirname $vsys_qrap_vhttpdroot ) ; pwd )/$( basename $vsys_qrap_vhttpdroot )"

    veva webserver \
	--port=${vsys_qrap_vhttpdport} \
	--docroot=${vsys_qrap_vhttpdroot} \
	--confdir=${tmpdir} \
	start
    
    cleanup_command="${cleanup_command} ; \
	status \"status: stopping special http server...\" ; \
	sleep 1 ; \
	veva webserver \
	--port=${vsys_qrap_vhttpdport} \
	--docroot=${vsys_qrap_vhttpdroot} \
	--confdir=${tmpdir} \
	stop \
	"
fi


if [ "${vsys_qrap_callback}Y" != "Y" ]; then
    eval "env \
	QRAP_HOST_IP=${qrap_host_ip} \
	QRAP_HTTPD_PORT=${vsys_qrap_vhttpdport} \
	QRAP_HTTPD_DOCROOT=${vsys_qrap_vhttpdroot} \
	QRAP_VDISPLAY=${vsys_qrap_vdisplay} \
	${vsys_qrap_callback} \
	"
fi


vopt_qopts="-net nic,model=pcnet -net user,hostname=zyxhost"

numqargs=0
while (($#)); do
    numqargs=$(($numqargs + 1))
    qargs[$numqargs]=$( echo $1 | \
	sed -e "s/QRAP_HOST_IP/${qrap_host_ip}/g" | \
	sed -e "s/QRAP_HTTPD_PORT/${vsys_qrap_vhttpdport}/g" )
    shift
done

qemu $vopt_qopts -pidfile ${tmpdir}/qpid.txt -serial stdio "${qargs[@]}" 2>&1 >> ${qoutputfile} &
qrap_qemu_pid=$!

cleanup_command="${cleanup_command} ; \
    status \"status: killing qemu...\" ; \
    sleep 1 ; kill ${qrap_qemu_pid} ; sleep 2 ; kill -KILL ${qrap_qemu_pid} \
    "

if (($vopt_debug)); then
    tail -f --pid=${qrap_qemu_pid} ${qoutputfile} &
fi

if [ "x${vsys_qrap_reaper}" != "x" ]; then
    qdone=0
    while ((!$qdone)); do
	if ( grep -q QEMU_DONE_IN_NEED_OF_SHUTDOWN ${qoutputfile} ); then
	    sleep 77
	    debug "killing qemu subprocess once"
	    kill -HUP $qrap_qemu_pid > /dev/null 2>&1
	    sleep 3
	    debug "killing qemu subprocess again for good measure"
	    kill -KILL $qrap_qemu_pid > /dev/null 2>&1
	    qdone=1
	    trap SIGCHLD
	    trap SIGHUP
	    trap SIGTERM
	    trap SIGINT
	else
	    if ( ps $qrap_qemu_pid > /dev/null 2>&1 ); then
		sleep 7
	    else
		debug "qemu exited without the help of qreaper"
		qdone=1
	    fi
	fi
    done
fi


status "status: waiting for qemu to exit..."
wait $qrap_qemu_pid

status "cleaning up..."
debug "cleanup_command is $cleanup_command..."
veva $cleanup_command
