#!/bin/bash
#
#############################################################################
#
# get_dna_of_vsi: a tool to get the Distro aNd Arch of a Virtual System Image
#
#############################################################################
#
# Copyright 2007-2010 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
# This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

# XXX: this script is in bypass mode for development expediency, see below...

#
## VirOS get_dna_of_vsi
##
## usage: get_dna_of_vsi <input.vsi> [outputfile]
##
## get_dna_of_vsi returns the distro and arch of the specified vsi
##
## outputs e.g.
## >-- begin output ---
## distro=fedora-8  // |centos-5.1|ubuntu-7.10|debian-4.0 (todo)
## arch=i686        // |i586|x86-64|ppc (todo)
## >-- end output ---
##

##
## constant definitions
##
viros_prefix=/usr

##
## load viros system library
##
if [ -f "$( dirname $0 )/libvsys.sh" ]; then
    source "$( dirname $0 )/libvsys.sh"
elif [ -f "${viros_prefix}/lib/viros/scripts/libvsys.sh" ]; then 
    source "${viros_prefix}/lib/viros/scripts/libvsys.sh" 
else
    echo "$0: error: fatal: could not load viros system library libvsys.sh"
    exit 1
fi

##
## qfakeroot special embedded function: 
##
## this represents what gets run as root if this
## script is passed to qfakeroot as --command
##
function target_script_to_run_as_root {
    export PATH="/sbin:/bin:/usr/sbin:/usr/bin"

    echo "qfakeroot: ${progname} starting..."
    
    mkdir -p /mnt/test
    mount -o ro /dev/qfrdi-copy-p1 /mnt/test
    if ( grep -q 'Guitar-ZyX release 0.4' /mnt/test/etc/system-release ); then
	echo "zyx-0.4" > /output/distro
    elif ( grep -q 'Fork-ZyX release 0.9.2' /mnt/test/etc/system-release ); then
	echo "zyx-0.4" > /output/distro
    elif ( grep -q 'Guitar-ZyX release 0.5' /mnt/test/etc/system-release ); then
	echo "zyx-0.5" > /output/distro
    elif ( grep -q 'Fork-ZyX release 0.9.3' /mnt/test/etc/system-release ); then
	echo "zyx-0.5" > /output/distro
    elif ( grep -q 'Fedora release 11' /mnt/test/etc/system-release ); then
	echo "fedora-11" > /output/distro
    elif ( grep -q 'Fedora release 12' /mnt/test/etc/system-release ); then
	echo "fedora-12" > /output/distro
    else
	echo "unknown" > /output/distro
    fi

    # since the running kernel here is not the same as the target (not guest_smirf?)
    # just assume all kernel arches are the same and take the first
    /usr/sbin/chroot /mnt/test rpm -q --qf "%{Arch}\n" kernel | head -1 > /output/arch

    umount /mnt/test

    echo "qfakeroot: ${progname}: done"
}
# run the qfakeroot special function and exit, if being called as such
if [ "$progname" == "qfakeroot.command" ]; then
    target_script_to_run_as_root
    exit 0
fi
##
## END EMBEDDED QFAKEROOT SCRIPT
##


##
## functions
##

##
## override libvopt.sh usage function
##
function usage {
    echo ""
    echo "${progname} \\"
    echo "    [--help] \\"
    echo "    [--quiet] \\"
    echo "    [--verbose] \\"
    echo "    [--debug] \\"
    echo "    <target vsi>"
    echo "    <outputfilename>"
    echo ""

    if [ "x${1}" == "xclean" ]; then
	exit 0
    else 
	exit 1
    fi
}

##
## functions
##

##
## define and parse options
##
vregopt help boolean 0
vregopt verbose boolean 0
vregopt debug boolean 0
vregopt quiet boolean 0
vparseopt "$@"

if (( $vopt_help )); then 
    usage clean 
fi

##
## process command line arguments
##

if [ $vopts_numargs -ne 2 ]; then usage; fi

sysimage="${vopts_args[1]}"
output="${vopts_args[2]}"

# TODO: error check arguments

# XXX:HACKHACKHACK: development expediency
#echo -en "distro=default\n" >> ${output}
#echo -en "arch=default\n" >> ${output}
#exit 0
# end XXX

verbose "initializing..."

sysimage=$( normalize_path "${sysimage}" )
output=$( normalize_path "${output}" )

tmpdir=$( mktemp -t -d vtmp.${progname}.${starttime}.${mypid}.XXXXXXXXXX )
mkdir -p ${tmpdir}
export TMPDIR=${tmpdir}

export vopt_debug
export vopt_verbose
export vopt_quiet

qfakeroot \
    --quiet \
    --command="${progdir}/${progname}" \
    --qflags="-m 64" \
    --scratch=1G \
    --add_files="/bin/bash" \
    --add_files="bindir:/usr/bin:755" \
    --add_files="bindir:/usr/sbin:755" \
    --add_files="${viros_scripts_dir}/libvsys.sh:${viros_prefix}/lib/viros/scripts/libvsys.sh" \
    --add_files="${viros_scripts_dir}/vdefs:${viros_prefix}/lib/viros/scripts/vdefs" \
    --add_files="${viros_scripts_dir}/libvopt.sh:${viros_prefix}/lib/viros/scripts/libvopt.sh" \
    --add_files="${viros_scripts_dir}/functions:${viros_prefix}/lib/viros/scripts/functions" \
    --add_files="${viros_scripts_dir}/vcommon:${viros_prefix}/lib/viros/scripts/vcommon" \
    --add_files="$( which splitter ):/bin/splitter" \
    --add_files="/bin/date" \
    --add_files="/bin/mount" \
    --add_files="/bin/umount" \
    --add_files="/bin/basename" \
    --add_files="/usr/bin/dirname" \
    --add_files="/bin/cp" \
    --add_files="/bin/mkdir" \
    --add_files="/bin/tar" \
    --add_files="/bin/cat" \
    --add_files="/bin/zcat" \
    --add_files="/bin/rm" \
    --add_files="/bin/sh" \
    --add_files="/usr/bin/head" \
    --add_files="/usr/sbin/chroot" \
    --disk_image="${sysimage}" \
    --outputdir=${tmpdir}/qfakeroot.outputdir

if $( echo "x${output}" | grep -q '/-$' ); then
    echo -en "distro=" 
    cat ${tmpdir}/qfakeroot.outputdir/distro
    echo -en "arch="
    cat ${tmpdir}/qfakeroot.outputdir/arch
else
    echo -en "distro=" >> "${output}"
    cat ${tmpdir}/qfakeroot.outputdir/distro >> "${output}"
    echo -en "arch=" >> "${output}"
    cat ${tmpdir}/qfakeroot.outputdir/arch >> "${output}"
fi

rm -rf ${tmpdir}

exit 0

