#!/bin/bash
#
#############################################################################
#
# tar2ext3img2: a tool to convert the contents of a tarball into an ext3 
#               filesystem image into a tarball
#
#############################################################################
#
# Copyright 2007 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
#This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################


viros_prefix=/usr

if [ -f "$( dirname $0 )/libvsys.sh" ]; then
    source "$( dirname $0 )/libvsys.sh"
elif [ -f "${viros_prefix}/lib/viros/scripts/libvsys.sh" ]; then 
    source "${viros_prefix}/lib/viros/scripts/libvsys.sh" 
else
    echo "$0: error: fatal: could not load viros system library libvsys.sh"
    exit 1
fi


function target_script_to_run_as_root {
    export PATH="/sbin:/bin:/usr/sbin:/usr/bin"

    modprobe loop

    mkdir /mnt.ext3fs
    dd if=/dev/zero of=/output/ext3fs.img \
	bs=1k count=1 seek=$(( 1024 * 1024 ))
    loopdev=$( losetup -f )
    losetup ${loopdev} /output/ext3fs.img
    mkfs.ext3 ${loopdev}
    mount -n -t ext3 ${loopdev} /mnt.ext3fs

    pushd /mnt.ext3fs
    tar xvpsf /input/ext3fs.tar 
    popd

    umount -n /mnt.ext3fs
    losetup -d ${loopdev}

}

if [ "$progname" == "qfakeroot.command" ]; then
    target_script_to_run_as_root
    exit 0
fi

function usage {
    echo ""
    echo "${progname} \\"
    echo "    [--help] \\"
    echo "    [--quiet] \\"
    echo "    [--verbose] \\"
    echo "    [--debug] \\"
    echo "    <input tar file> \\"
    echo "    <output ext3fs image file> "
    echo ""

    if [ "x${1}" == "xclean" ]; then
	exit 0
    else 
	exit 1
    fi
}


vregopt config string ""
vregopt help boolean 0
vregopt verbose boolean 0 inherit
vregopt debug boolean 0 inherit
vregopt quiet boolean 0 inherit
vregopt tmpdir string "${TMPDIR}" inherit
vparseopt "$@"

if (( $vopt_help )); then usage clean; fi

if (( $vopts_numargs != 2 )); then usage; fi

verbose "creating temporary directory..."
export TMPDIR=${vopt_tmpdir}
tmpdir=$( mktemp -t -d vtmp.${progname}.${starttime}.${mypid}.XXXXXXXXXX )
if (($?)); then
    die "failed to mktemp"
fi
export TMPDIR=${tmpdir}
verbose "temporary directory is ${tmpdir}"

if [ ! -f ${vopts_args[1]} ]; then
    echo "ERROR: problem with input iso ${vopts_args[1]}"
    exit 1
else
    pushd "$( dirname ${vopts_args[1]} )" > /dev/null 2>&1
    inputrealpath="$( pwd )/$( basename ${vopts_args[1]} )"
    popd > /dev/null 2>&1
fi

if [ -f ${vopts_args[2]} ]; then
    echo "ERROR: output file ${vopts_args[2]} already exists"
    exit 1
fi

export vopt_debug
export vopt_verbose
export vopt_quiet

qfakeroot \
    --command=${progdir}/${progname} \
    --scratch=11G \
    --add_files="/bin/bash" \
    --add_files="bindir:/usr/bin:755" \
    --add_files="bindir:/usr/sbin:755" \
    --add_files="${viros_scripts_dir}/libvsys.sh:${viros_prefix}/lib/viros/scripts/libvsys.sh" \
    --add_files="${viros_scripts_dir}/vdefs:${viros_prefix}/lib/viros/scripts/vdefs" \
    --add_files="${viros_scripts_dir}/libvopt.sh:${viros_prefix}/lib/viros/scripts/libvopt.sh" \
    --add_files="${viros_scripts_dir}/functions:${viros_prefix}/lib/viros/scripts/functions" \
    --add_files="${viros_scripts_dir}/vcommon:${viros_prefix}/lib/viros/scripts/vcommon" \
    --add_files="$( which splitter ):/bin/splitter" \
    --add_files="/bin/mount" \
    --add_files="/bin/umount" \
    --add_files="/bin/basename" \
    --add_files="/usr/bin/dirname" \
    --add_files="/bin/cp" \
    --add_files="/bin/mkdir" \
    --add_files="/bin/tar" \
    --add_files="/bin/rm" \
    --add_files="${vopts_args[1]}:/input/ext3fs.tar" \
    --add_modules="loop" \
    --outputdir=${tmpdir}/qfakeroot.outputdir

mv ${tmpdir}/qfakeroot.outputdir/ext3fs.img ${vopts_args[2]}


if (($vopt_debug)); then
    debug "NOT REMOVING tmpdir ${tmpdir}"
else
    verbose "cleaning up tmpdir ${tmpdir}"
    rm -rf ${tmpdir}
fi

veva $cleanup_command

status "done"

exit 0

