#!/bin/bash
#
#############################################################################
#
# transmogrify: zyx transmogrication procedure for VSI to LiveISO
#
#############################################################################
#
# Copyright 2007 Douglas McClendon <dmc AT filteredperception DOT org>
#
#############################################################################
#
#This file is part of VirOS.
#
#    VirOS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    VirOS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with VirOS.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################


starttime="$( date +%Y%m%d%H%M%S )"
rundir="$( pwd )"
progname="$( basename $0 )"
progdir=$( ( pushd $( dirname $0 ) > /dev/null 2>&1 ; \
    pwd ; popd > /dev/null 2>&1 ) )
rundir=$( pwd )
mypid=$$

targetroot=/vxmog.input.copy/vxmog.input
targetisodir=/scratch/iso


fs_label="zyx-live-$( date +%Y%m%d-%H%M )"

uncompressed_size_mb=4096

ext3_blocksize=4096

selinux=0

md5verify=0

bootloader_sdmc_mode=0

bootloader_hhuey_mode=0

prelink=0

timestamps="199912211221.42"

compression=squashfs
compression_squashfs_options="-read-queue 64 -write-queue 512"

bootloader=isolinux
bootloader_splash=none
bootloader_timeout=42
bootloader_append=""
bootloader_welcome="ZyX LiveOS Boot Menu"

bootloader_isolinux_menu_margin="23"
bootloader_isolinux_menu_width="80"
bootloader_isolinux_menu_rows="5"
bootloader_isolinux_menu_tabmsgrow="11"
bootloader_isolinux_menu_cmdlinerow="11"
bootloader_isolinux_menu_vshift="20"
bootloader_isolinux_menu_endrow="17"
bootloader_isolinux_menu_timeoutrow="13"

mkisofs_options="-no-emul-boot -boot-load-size 4 -boot-info-table -J -r -hide-rr-moved"

echo "about to calculate user_kernel_version"
ls -1A ${targetroot}/boot
echo "about to calculate user_kernel_version"
use_kernel_version=$( ls -1A ${targetroot}/boot/vmlinuz* | sort | \
    tail -1 | sed -e 's/.*vmlinuz-//' )
echo "ukv $use_kernel_version"


function die {
    echo "${progname}: FATAL ERROR: $@"
    exit 1
}

function verbose {
    echo "${progname}: verbose: $@"
}

function status {
    echo "${progname}: status: $@"
}


verbose "starting"

verbose "reading vxmogopts"
source /input/vxmogopts
verbose "printing transmogrifier config"
cat /input/vxmogopts
verbose "done printing transmogrifier config"

if (( $selinux )); then
    verbose "initializing selinux"
    mkdir -p /etc/selinux/targeted
    cp -av ${targetroot}/etc/selinux/targeted/policy \
	/etc/selinux/targeted/policy
    mkdir /selinux
    mount -t selinuxfs selinuxfs /selinux
    ${targetroot}/usr/sbin/load_policy
    ${targetroot}/usr/sbin/setenforce Permissive
fi

mkdir -p ${targetisodir}/boot/LiveOS/zyx

verbose "creating zyx-live-os fstab"
cat <<EOF> ${targetroot}/etc/fstab
/dev/mapper/zyx-liveos-rw  /            ext3    defaults,noatime     0 0
devpts                     /dev/pts     devpts  gid=5,mode=620       0 0
tmpfs                      /dev/shm     tmpfs   defaults             0 0
proc                       /proc        proc    defaults             0 0
sysfs                      /sys         sysfs   defaults             0 0
EOF

if (( $selinux )); then
    tarsel="--selinux"
    bootappendsel=""

else
    verbose "disabling selinux on target"
    tarsel="--no-selinux"
    bootappendsel="selinux=0"
    mv ${targetroot}/etc/selinux/config \
	${targetroot}/etc/selinux.config.disabled
    echo "SELINUX=disabled" \
	> ${targetroot}/etc/selinux/config
fi

if [ -f ${targetroot}/etc/modprobe.conf ]; then
    cp ${targetroot}/etc/modprobe.conf ${targetroot}/etc/modprobe.conf.qemu
    echo -en "\n" > ${targetroot}/etc/modprobe.conf
fi


rm -f ${targetroot}/etc/sysconfig/network-scripts/ifcfg-eth0
rm -f ${targetroot}/boot/initrd*
rm -f ${targetroot}/etc/X11/xorg.conf
rm -f ${targetroot}/etc/sysconfig/hwconf
rm -f ${targetroot}/etc/lvm/cache/.cache
rm -f ${targetroot}/etc/blkid/blkid.tab
rm -f ${targetroot}/etc/blkid/blkid.tab.old


if (( $prelink )); then
    verbose "running prelink, this will take awhile"
    chroot ${targetroot} /usr/sbin/prelink --verbose -mRaN 
fi


if (( $md5verify )); then
    verbose "installing checkisomd5"
    cp /input/bin/checkisomd5 ${targetroot}/bin/
fi

verbose "installing smirfgen..."
mkdir ${targetroot}/usr/lib/viros
mkdir ${targetroot}/usr/lib/viros/scripts
mkdir ${targetroot}/usr/lib/viros/ZyX-Live-OS
cp /input/smirfgen/usr/bin/smirfgen \
     ${targetroot}/usr/bin/smirfgen
cp /bin/splitter \
     ${targetroot}/usr/bin/splitter
cp -av /input/smirfgen/usr/lib/viros/scripts/* \
     ${targetroot}/usr/lib/viros/scripts/
cp -av /input/smirfgen/usr/lib/viros/ZyX-Live-OS/* \
     ${targetroot}/usr/lib/viros/ZyX-Live-OS/

verbose "running smirfgen..."
chroot ${targetroot} \
    /usr/bin/smirfgen \
    --config=ZyX-Live-OS/smirfgen.cfg \
    --output=/boot/initrd-${use_kernel_version}.zyx.img \
    --kversion=${use_kernel_version}

verbose "cleaninug up /var/log..."
rm -vf ${targetroot}/var/log/*vrun* 
rm -vf ${targetroot}/var/log/*vsys*

verbose "cleaninug up /tmp..."
rm -vf ${targetroot}/tmp/*

verbose "configuring target bootloader"



echo "${use_kernel_version}" > ${targetisodir}/boot/kernver1.txt
cp ${targetroot}/boot/vmlinuz-${use_kernel_version} \
    ${targetisodir}/boot/vmlinuz.1
mv ${targetroot}/boot/initrd-${use_kernel_version}.zyx.img \
    ${targetisodir}/boot/initrd.1

rm -f ${targetroot}/boot/initrd-*
for kernel in $( ls -1A ${targetroot}/boot/vmlinuz-* ); do
    rm -f ${kernel}
    ln -s /mnt/.LiveOS/prime_rootfs/boot/vmlinuz.1 ${kernel}
done

sed -i -e 's/Booting\ the\ kernel\./\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ /' \
    ${targetisodir}/boot/vmlinuz.1
sed -i -e 's/Parsing\ ELF\.\.\./\ \ \ \ \ \ \ \ \ \ \ \ \ \ /' \
    ${targetisodir}/boot/vmlinuz.1
sed -i -e 's/done\./\ \ \ \ \ /' \
    ${targetisodir}/boot/vmlinuz.1
sed -i -e  's/Decompressing\ Linux\.\.\./\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ /' \
    ${targetisodir}/boot/vmlinuz.1


if [ "x${bootloader}" = "xgrub" ]; then
    bootloader_mkisofs_opts="-b boot/grub/stage2_eltorito -c boot/grub/boot.catalog"

    mkdir ${targetisodir}/boot/grub

    o
    cp /input/usr/share/grub/i386-redhat/stage2_eltorito \
	${targetisodir}/boot/grub
    cp ${targetroot}/boot/grub/splash.xpm.gz ${targetisodir}/boot/grub

    if (( $md5verify )); then
	grub_verify_entry=""
    else
	grub_verify_entry=""
    fi

    cat <<EOF> ${targetisodir}/boot/grub/grub.conf
default=0
timeout=${bootloader_timeout}
splashimage=(cd)/boot/grub/splash.xpm.gz
hiddenmenu
title ${fs_label}
        root (cd)
        kernel /boot/vmlinuz.1 ro quiet root=ISOLABEL=${fs_label} rootfstype=iso9660 zyx=${fs_label} liveimg ${bootloader_append}
        initrd /boot/initrd.1
EOF

elif [ "x${bootloader}" = "xisolinux" ]; then
    bootloader_mkisofs_opts="-b boot/isolinux/isolinux.bin -c boot/isolinux/boot.cat"

    mkdir ${targetisodir}/boot/isolinux


    cp /input/usr/lib/syslinux/isolinux.bin ${targetisodir}/boot/isolinux
    cp /input/usr/lib/syslinux/vesamenu.c32 ${targetisodir}/boot/isolinux
    if [ -f ${targetroot}/${bootloader_splash} ]; then
	cp ${targetroot}/${bootloader_splash} \
	    ${targetisodir}/boot/isolinux/splash.jpg
    fi

    if (( $md5verify )); then
	isolinux_verify_entry="label check
  menu label Check Media Then Boot
  kernel /boot/vmlinuz.1
  append initrd=/boot/initrd.1  ro quiet root=ISOLABEL=${fs_label} rootfstype=iso9660 zyx=${fs_label}  ${bootloader_append} liveimg check "
    else
	isolinux_verify_entry=""
    fi

    if (( $bootloader_sdmc_mode )); then
	isolinux_sdmc_entry="label sdmc
  menu label Try SuperDeviceMapperCaching
  kernel /boot/vmlinuz.1
  append initrd=/boot/initrd.1  ro quiet loglevel=0 root=ISOLABEL=${fs_label} rootfstype=iso9660 zyx=${fs_label}  ${bootloader_append} liveimg sdmc_megs=16 "
    else
	isolinux_sdmc_entry=""
    fi

    if (( $bootloader_hhuey_mode )); then
	isolinux_hhuey_entry="label hhuey
  menu label Try K.A.B.L.U.I.
  kernel /boot/vmlinuz.1
  append initrd=/boot/initrd.1  ro quiet loglevel=0 root=ISOLABEL=${fs_label} rootfstype=iso9660 zyx=${fs_label}  ${bootloader_append} liveimg hhuey "
    else
	isolinux_hhuey_entry=""
    fi

    cat <<EOF> ${targetisodir}/boot/isolinux/isolinux.cfg
default vesamenu.c32
timeout $(( ${bootloader_timeout} * 10 ))

menu margin ${bootloader_isolinux_menu_margin}
menu width  ${bootloader_isolinux_menu_width}
menu rows  ${bootloader_isolinux_menu_rows}
menu tabmsgrow  ${bootloader_isolinux_menu_tabmsgrow}
menu cmdlinerow ${bootloader_isolinux_menu_cmdlinerow}
menu vshift ${bootloader_isolinux_menu_vshift} 
menu endrow ${bootloader_isolinux_menu_endrow}
menu timeoutrow ${bootloader_isolinux_menu_timeoutrow}

menu background splash.jpg
menu title ${bootloader_welcome}
menu color border 0 #ffffffff #00000000
menu color sel 7 #ffffffff #ff000000
menu color title 0 #ffffffff #00000000
menu color tabmsg 0 #ffffffff #00000000
menu color unsel 0 #ff999999 #00000000
menu color hotsel 0 #ff000000 #ffffffff
menu color hotkey 7 #ffffffff #ff000000

label linux
  menu label Boot ${fs_label} LiveOS
  kernel /boot/vmlinuz.1
  append initrd=/boot/initrd.1  ro quiet loglevel=0 root=ISOLABEL=${fs_label} rootfstype=iso9660 zyx=${fs_label} liveimg ${bootloader_append}
${isolinux_hhuey_entry}
${isolinux_sdmc_entry}
${isolinux_verify_entry}
label safe
  menu label Boot Safe/Text/Rescue Mode
  kernel /boot/vmlinuz.1
  append initrd=/boot/initrd.1  ro verbose root=ISOLABEL=${fs_label} rootfstype=iso9660 zyx=${fs_label} liveimg ${bootloader_append} 1 
EOF

else
    status "unknown bootloader choice $bootloader, not installing anything!!!"
fi


mkdir -p /scratch/squashfs/boot/LiveOS/zyx
dd if=/dev/zero of=/scratch/squashfs/boot/LiveOS/zyx/${fs_label}.ext3.img bs=512 count=1 seek=$(( $uncompressed_size_mb * 1024 * 1024 / 512 ))
verbose "about to ls -lh and du -cms on /scratch/squashfs/boot/LiveOS/zyx/${fs_label}.ext3.img"
ls -lh /scratch/squashfs/boot/LiveOS/zyx/${fs_label}.ext3.img
du -cms /scratch/squashfs/boot/LiveOS/zyx/${fs_label}.ext3.img
loopdevice=$( losetup -f )
verbose "loopdevice is ${loopdevice}"
losetup ${loopdevice} \
    /scratch/squashfs/boot/LiveOS/zyx/${fs_label}.ext3.img \
    > /tmp/losetup.out 2>&1

verbose "/tmp/losetup.out is..."
cat /tmp/losetup.out
verbose "...eof, dmesg coming"
dmesg
verbose "about to losetup -a"
losetup -a
verbose "about to mkfs.ext3"
verbose "about to /sbin/mkfs.ext3 -v -b ${ext3_blocksize} -L \"${fs_label}\" -m 1 ${loopdevice} $(( $uncompressed_size_mb * 1024 * 1024 / ${ext3_blocksize} ))"
mkfs.ext3 -v -b ${ext3_blocksize} -L "${fs_label}" -m 1 ${loopdevice} $(( $uncompressed_size_mb * 1024 * 1024 / ${ext3_blocksize} ))


verbose "about to tune2fs"
${targetroot}/sbin/tune2fs -c 0 -i 0 ${loopdevice}
mkdir /scratch/target
verbose "about to mount target"
mount -t ext3 ${loopdevice} /scratch/target
verbose "after mount target, df is"
df -h

top -d 30 -b &

pushd ${targetroot}

if [ -d ./VirOS.prime_rootfs ]; then
    mv ./VirOS.prime_rootfs/* ${targetisodir}/
    rmdir ./VirOS.prime_rootfs 
fi

if [ -f ./var/log/viros.boot.afiles.sorted_by_size.txt ]; then
    mv ./var/log/viros.boot.afiles.sorted_by_size.txt /scratch/sortlist
    rm -f ./var/log/viros.*
    while read filename; do
	echo "XMOG STATUS: sort copying ${filename}"
	tar ${tarsel} -S --no-recursion -cpsf - ./${filename} | ( cd /scratch/target ; tar ${tarsel} -S -xvpsf - ) 
    done < /scratch/sortlist
    tar ${tarsel} -S --no-recursion -cpsf - ./lib/modules | ( cd /scratch/target ; tar ${tarsel} -S -xvpsf - )
    tar ${tarsel} -S --no-recursion -cpsf - ./usr/lib/xorg/modules | ( cd /scratch/target ; tar ${tarsel} -S -xvpsf - )
    rsync -avuHX ./usr/lib/xorg/modules/ /scratch/target/usr/lib/xorg/modules
    rsync -avuHX ./lib/modules/ /scratch/target/lib/modules
    rsync -avuHX ./ /scratch/target
else
    ( tar --one-file-system ${tarsel} -S -cpsf - . | ( cd /scratch/target ; tar ${tarsel} -S -xvpsf - ) ) 
fi

verbose "tar done" 
popd


if (( $selinux )); then
    verbose "running restorecon again" 
    mount --bind /sys /scratch/target/sys
    mount --bind /dev /scratch/target/dev
    mount --bind /dev/pts /scratch/target/dev/pts
    mount --bind /proc /scratch/target/proc
    mount --bind /selinux /scratch/target/selinux
    /usr/sbin/chroot /scratch/target /sbin/restorecon -v -r /
    umount /scratch/target/selinux
    umount /scratch/target/proc
    umount /scratch/target/dev/pts
    umount /scratch/target/dev
    umount /scratch/target/sys
    verbose "done running restorecon again" 
fi

if [ "x${timestamps}" != "x" ]; then
    verbose "changing timestamps to $timestamps"
    /usr/sbin/chroot /scratch/target find / -xdev \
	-exec touch -t $timestamps '{}' ';'
fi

sync ; sleep 1 ; sync
verbose "tar really done"

verbose "unmounting /scratch/target"
umount /scratch/target 


pushd /scratch/squashfs
verbose "starting squashfs"
mksquashfs \
    boot \
    ${targetisodir}/boot/LiveOS/zyx/${fs_label}.squashfs.img \
    -info \
    $compression_squashfs_options \
    -keep-as-directory
popd


verbose "running mkisofs"
mkisofs -o /output/zyx-live.iso \
    $bootloader_mkisofs_opts \
    $mkisofs_options \
    -V ${fs_label} \
    ${targetisodir}

if (( $md5verify )); then
    verbose "implanting md5sum in iso"
    /input/bin/implantisomd5 /output/zyx-live.iso
fi

verbose "zyx-live transmogrify done"
exit 0
